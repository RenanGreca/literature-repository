{"year":2016,"authors":"Buchgeher, Georg; Klammer, Claus; Heider, Wolfgang; Schuetz, Martin; Huber, Heinz","title":"Improving testing in an enterprise SOA with an architecture-based approach","bibtex":"buchgeher_improving_2016","abstract":"High resource demand for system testing is a major obstacle for continuous delivery. This resource demand can be reduced by prioritizing test cases, e.g., by focusing on tests that cover a lot of functionality. For large-scale systems, like an enterprise SOA, defining such test cases can be difficult for the tester because of the lack of relevant knowledge about the system. We propose an approach for test case prioritization and selection that is based on architectural viewpoint that provides software testers with the required architectural information. We outline how architectural information is used for defining and selecting prioritized test cases. The approach has been developed in close cooperation with the provider of an enterprise SOA in the banking domain in Austria following an action research approach. In addition, the approach has been validated in an industrial case study. Validation showed that there is no further need for manual architectural analysis to be able to prioritize and select test cases. We also show the limitations of our approach as it is based on static code analysis. Â© 2016 IEEE.","published_in":"2016 13th Working IEEE/IFIP Conference on Software Architecture (WICSA)","publisher":"IEEE","source":"Query","doi":"https://doi.org/10.1109/WICSA.2016.24","date":"2016-07-21","categories":"Orchestration technique/Context-specific","tcp":"X","tcs":"X","tsr":"","tsa":"","context":"General(Java)","ind_motivation":"TRUE","ind_evaluation":"TRUE","exp_subjects":"Undisclosed projects from RSG","ind_partner":"Raiffeisen Software GmbH (Austria)","ind_author":"TRUE","prac_feedback":"FALSE","avai_tool":"FALSE","put_practice":"TRUE","suppl_url":"","included":"TRUE","approach":"model-based","metrics":"Load factor?","open_challenges":"Combine different information sources to improve TCP+TCS; incorporate system evolution information; use derived information towards test case generation"}
