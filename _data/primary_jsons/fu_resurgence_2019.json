{"type": "primary", "year": "2019", "authors": "Fu, Ben; Misailovic, Sasa; Gligoric, Milos", "author_keys": ["fu_ben", "misailovic_sasa", "gligoric_milos"], "title": "Resurgence of Regression Test Selection for C++", "bibtex": "fu_resurgence_2019", "abstract": "Regression testing - running available tests after each project change - is widely practiced in industry. Despite its widespread use and importance, regression testing is a costly activity. Regression test selection (RTS) optimizes regression testing by selecting only tests affected by project changes. RTS has been extensively studied and several tools have been deployed in large projects. However, work on RTS over the last decade has mostly focused on languages with abstract computing machines (e.g., JVM). Meanwhile development practices (e.g., frequency of commits, testing frameworks, compilers) in C++ projects have dramatically changed and the way we should design and implement RTS tools and the benefits of those tools is unknown. We present a design and implementation of an RTS technique, dubbed RTS++, that targets projects written in C++, which compile to LLVM IR and use the Google Test testing framework. RTS++ uses static analysis of a function call graph to select tests. RTS++ integrates with many existing build systems, including AutoMake, CMake, and Make. We evaluated RTS++ on 11 large open-source projects, totaling 3,811,916 lines of code. To the best of our knowledge, this is the largest evaluation of an RTS technique for C++. We measured the benefits of RTS++ compared to running all available tests (i.e., retest-all). Our results show that RTS++ reduces the number of executed tests and end-to-end testing time by 88% and 61% on average.", "published_in": "2019 12th IEEE Conference on Software Testing, Validation and Verification (ICST)", "publisher": "IEEE", "doi": "10.1109/ICST.2019.00039", "date": "2019-06-06", "tcp": "", "tcs": "X", "tsr": "", "tsa": "", "ind_motivation": "TRUE", "ind_evaluation": "FALSE", "exp_subjects": "Open-source C++ projects (up to 673 TCs)\n\nOpen-source, medium scale", "prog_language": "C++", "ind_partner": "", "ind_author": "FALSE", "prac_feedback": "FALSE", "avai_tool": "FALSE", "put_practice": "FALSE", "suppl_url": "", "approach": "Change-based", "info_approach": "Change-based", "alg_approach": "", "metrics": "selection count, end-to-end time, cumulative time", "effe_metrics": "Selection/reduction count/percentage", "effi_metrics": "Total/End-to-end time", "other_metrics": "", "open_challenges": "Improve precision by removing certian class dependencies and dynamically collecting dependencies; support the Boost testing framework; develop adaptive and hybrid RTS for C++"}