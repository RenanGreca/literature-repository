{"type": "primary", "year": "2017", "authors": "Kwon, Jung-Hyun; Ko, In-Young", "author_keys": ["kwon_jung-hyun", "ko_in-young"], "title": "Cost-effective regression testing using bloom filters in continuous integration development environments", "bibtex": "kwon_cost-effective_2017", "abstract": "Regression testing in continuous integration development environments \nmust be cost-effective and should provide fast feedback on test suite \nfailures to the developers. In order to provide faster feedback on \nfailures to developers while using computing resources efficiently, two \ntypes of regression testing techniques have been developed: Regression \nTesting Selection (RTS) and Test Case Prioritization (TCP). One of the \nfactors that reduces the effectiveness of the RTS and TCP techniques is \nthe inclusion of test suites that fail only once over a period. We \npropose an approach based on Bloom filtering to exclude such test suites\n during the RTS process, and to assign such test suites with a lower \npriority during the TCP process. We experimentally evaluate our approach\n using a Google dataset, and demonstrate that cost-effectiveness of the \nproposed RTS and TCP techniques outperforms the state-of-the-art \ntechniques.", "published_in": "2017 24th Asia-Pacific Software Engineering Conference (APSEC)", "publisher": "IEEE", "doi": "10.1109/APSEC.2017.22", "date": "2018-03-05", "tcp": "X", "tcs": "X", "tsr": "", "tsa": "", "ind_motivation": "TRUE", "ind_evaluation": "TRUE", "exp_subjects": "GSDTSR (5555 TCs)\n\nIndustrial open-source, large scale.", "prog_language": "C, Java, Python, etc.", "ind_partner": "", "ind_author": "FALSE", "prac_feedback": "FALSE", "avai_tool": "FALSE", "put_practice": "FALSE", "suppl_url": "", "approach": "A bloom \ufb01lter is used together with the window-based method proposed by Elbaum and Penix with the purpose of removing test suites that failed only once over a period. The selected test suites receive a weight that is later used for prioritizing the TS execution (so some notion of orchestration could possibly be considered).", "info_approach": "History-based", "alg_approach": "Bloom filter or window-based", "metrics": "Fault detection capability, Efftime (efficiency), and Precision.", "effe_metrics": "Accuracy/precision/recall, Fault Detection Capability, Faults per tests/time", "effi_metrics": "", "other_metrics": "", "open_challenges": "Improve the approach to reduce the false-positive cases."}