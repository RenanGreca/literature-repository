{"type": "primary", "year": "2021", "authors": "Mehta, Sonu; Farmahinifarahani, Farima; Bhagwan, Ranjita; Guptha, Suraj; Jafari, Sina; Kumar, Rahul; Saini, Vaibhav; Santhiar, Anirudh", "author_keys": ["mehta_sonu", "farmahinifarahani_farima", "bhagwan_ranjita", "guptha_suraj", "jafari_sina", "kumar_rahul", "saini_vaibhav", "santhiar_anirudh"], "title": "Data-driven test selection at scale", "bibtex": "mehta_data-driven_2021", "abstract": "Large-scale services depend on Continuous Integration/Continuous Deployment (CI/CD) processes to maintain their agility and code-quality. Change-based testing plays an important role in finding bugs, but testing after every change is prohibitively expensive at a scale where thousands of changes are committed every hour. Test selection models deal with this issue by running a subset of tests for every change.\n\nIn this paper, we present a generic, language-agnostic and lightweight statistical model for test selection. Unlike existing techniques, the proposed model does not require complex feature extraction techniques. Consequently, it scales to hundreds of repositories of varying characteristics while capturing more than 99% of buggy pull requests. Additionally, to better evaluate test selection models, we propose application-specific metrics that capture both a reduction in resource cost and a reduction in pull-request turn-around time. By evaluating our model on 22 large repositories at Microsoft, we find that we can save 15%\u221230% of compute time while reporting back more than \u224899% of buggy pull requests.", "published_in": "ESEC/FSE 2021: Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering", "publisher": "ACM", "doi": "10.1145/3468264.3473916", "date": "2021-08-18", "tcp": "", "tcs": "X", "tsr": "", "tsa": "", "ind_motivation": "TRUE", "ind_evaluation": "TRUE", "exp_subjects": "Industrial proprietary, very large scale\n\n22 large scale repositories at Microsoft (up to 60 million test suites!?)", "prog_language": "Language-agnostic", "ind_partner": "Microsoft (USA)", "ind_author": "TRUE", "prac_feedback": "TRUE", "avai_tool": "FALSE", "put_practice": "TRUE (it's an improvement to an already-used test platform at Microsoft, so it is quite likely to be implemented)", "suppl_url": "", "approach": "failure probability (history-based?)", "metrics": "COGS (cost of goods sold), turn-around time reduction, failure detection rate", "open_challenges": "Developer experience, complexity of code changes, weighted test selection"}