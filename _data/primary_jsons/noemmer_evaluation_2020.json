{"year": "2020", "authors": "Noemmer, Raphael; Haas, Roman", "title": "An Evaluation of Test Suite Minimization Techniques", "bibtex": "noemmer_evaluation_2020", "abstract": "As a software project evolves over time, the associated test suite usually grows with it. If test suites are not carefully maintained, this can easily result in massive test execution duration, reducing the benefits of regression testing because faults are found later in development or even after release. Test suite minimization aims to combat long running test suites by removing redundant test cases. Previous work mainly evaluates test suite minimization techniques based on comparably small projects, which are less practically relevant. In this paper, we compare four test suite minimization techniques by applying them to several open source software projects and evaluate the results. We find that the size and execution time of all the test suites can be reduced by over 70% on average. However, there is a substantial loss in fault detection capability of, on average, around 12.5%, restricting the applicability of this form of test suite minimization. \u00a9 Springer Nature Switzerland AG 2020.", "published_in": "SWQD 2020: International Conference on Software Quality", "publisher": "Springer", "doi": "10.1007/978-3-030-35510-4_4 ", "date": "2019-12-09", "tcp": "", "tcs": "", "tsr": "X", "tsa": "", "ind_motivation": "FALSE", "ind_evaluation": "TRUE", "exp_subjects": "Open-source Java projects (up to 14770 TCs)", "ind_partner": "CQSE (Germany)", "ind_author": "TRUE", "prac_feedback": "FALSE", "avai_tool": "FALSE", "put_practice": "FALSE", "suppl_url": "", "approach": "basic greedy and the HGS\nalgorithm (guided by statement coverage only)", "metrics": "-test suite reduction achieved\n-Impact on fault detection capability\n-execution time of the reduced test suite (important finding: \"The reduction in number of tests appears to be a bad indicator for the reduction in execution time\")\n", "open_challenges": ""}