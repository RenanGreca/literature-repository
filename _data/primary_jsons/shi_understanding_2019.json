{"type": "primary", "year": "2019", "authors": "Shi, August; Zhao, Peiyuan; Marinov, Darko", "author_keys": ["shi_august", "zhao_peiyuan", "marinov_darko"], "title": "Understanding and improving regression test selection in continuous integration", "bibtex": "shi_understanding_2019", "abstract": "Developers rely on regression testing in their continuous integration (CI) environment to find changes that introduce regression faults. While regression testing is widely practiced, it can be costly. Regression test selection (RTS) reduces the cost of regression testing by not running the tests that are unaffected by the changes. Industry has adopted module-level RTS for their CI environment, while researchers have proposed class-level RTS. In this paper, we compare module-and class-level RTS techniques in a cloud-based CI environment, Travis. We also develop and evaluate a hybrid RTS technique that combines aspects of the module-and class-level RTS techniques. We evaluate all the techniques on real Travis builds. We find that the RTS techniques do save testing time compared to running all tests (RetestAll), but the percentage of time for a full build using RTS (76.0%) is not as low as found in previous work, due to the extra overhead in a cloud-based CI environment. Moreover, we inspect test failures from RetestAll builds, and although we find that RTS techniques can miss to select failed tests, these test failures are almost all flaky test failures. As such, RTS techniques provide additional value in helping developers avoid wasting time debugging failures not related to the recent code changes. Overall, our results show that RTS can be beneficial for the developers in the CI environment, and RTS not only saves time but also avoids misleading developers by flaky test failures.", "published_in": "2019 IEEE 30th International Symposium on Software Reliability Engineering (ISSRE)", "publisher": "IEEE", "doi": "10.1109/ISSRE.2019.00031", "date": "2020-02-10", "tcp": "", "tcs": "X", "tsr": "", "tsa": "", "ind_motivation": "TRUE", "ind_evaluation": "FALSE", "exp_subjects": "Open-source Java projects (up to 335 TCs)\n\nOpen-source, small scale", "prog_language": "Java", "ind_partner": "", "ind_author": "FALSE", "prac_feedback": "FALSE", "avai_tool": "FALSE", "put_practice": "FALSE", "suppl_url": "", "approach": "change-based", "info_approach": "Change-based", "alg_approach": "", "metrics": "Selection rate, time savings", "effe_metrics": "Selection/reduction count/percentage, Testing time", "effi_metrics": "", "other_metrics": "", "open_challenges": "n/a"}