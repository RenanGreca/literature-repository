{"type": "primary", "year": "2017", "authors": "Vasic, Marko; Parvez, Zuhair; Milicevic, Aleksandar; Gligoric, Milos", "author_keys": ["vasic_marko", "parvez_zuhair", "milicevic_aleksandar", "gligoric_milos"], "title": "File-Level vs. Module-Level Regression Test Selection for .NET", "bibtex": "vasic_file-level_2017", "abstract": "Regression testing is used to check the correctness of evolving software. With the adoption of Agile development methodology, the number of tests and software revisions has dramatically increased, and hence has the cost of regression testing. Researchers proposed regression test selection (RTS) techniques that optimize regression testing by skipping tests that are not impacted by recent program changes. Ekstazi is one such state-of-the art technique; Ekstazi is implemented for the Java programming language and has been adopted by several companies and open-source projects.\nWe report on our experience implementing and evaluating Ekstazi#, an Ekstazi-like tool for .NET. We describe the key challenges of bringing the Ekstazi idea to the .NET platform. We evaluate Ekstazi# on 11 open-source projects, as well as an internal Microsoft project substantially larger than each of the open-source projects. Finally, we compare Ekstazi# to an incremental build system (also developed at Microsoft), which, out of the box, provides module-level dependency tracking and skipping tasks (including test execution) whenever dependencies of a task do not change between the current and the last successful build. Ekstazi# on average reduced regression testing time by 43.70% for the open-source projects and by 65.26% for the Microsoft project (the latter is in addition to the savings provided by incremental builds).", "published_in": "ESEC/FSE 2017: Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering", "publisher": "ACM", "doi": "10.1145/3106237.3117763", "date": "2017-08-21", "tcp": "", "tcs": "X", "tsr": "", "tsa": "", "ind_motivation": "TRUE", "ind_evaluation": "TRUE", "exp_subjects": "Open-source C# projects (up to 138 TCs) plus one Microsoft project (37 TCs)", "ind_partner": "Microsoft (USA)", "ind_author": "TRUE", "prac_feedback": "FALSE", "avai_tool": "FALSE", "put_practice": "FALSE", "suppl_url": "https://github.com/marko-vasic/ekstaziSharp", "approach": "Change-based", "metrics": "selection count, execution time, cumulative time", "open_challenges": "n/a"}