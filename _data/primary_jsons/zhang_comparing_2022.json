{"type": "primary", "year": "2022", "authors": "Zhang, Jiyang; Liu, Yu; Gligoric, Milos; Legunsen, Owolabi; Shi, August", "author_keys": ["zhang_jiyang", "liu_yu", "gligoric_milos", "legunsen_owolabi", "shi_august"], "title": "Comparing and Combining Analysis-Based and Learning-Based Regression Test Selection", "bibtex": "zhang_comparing_2022", "abstract": "Regression testing--rerunning tests on each code version to detect newly--broken functionality-is important and widely practiced. But, regression testing is costly due to the large number of tests and the high frequency of code changes. Regression test selection (RTS) optimizes regression testing by only rerunning a subset of tests that can be affected by changes. Researchers showed that RTS based on program analysis can save substantial testing time for (medium-sized) open-source projects. Practitioners also showed that RTS based on machine learning (ML) works well on very large code repositories, e.g., in Facebook's monorepository. We combine analysis-based RTS and ML-based RTS by using the latter to choose a subset of tests selected by the former. We first train several novel ML models to learn the impact of code changes on test outcomes using a training dataset that we obtain via mutation analysis. Then, we evaluate the benefits of combining ML models with analysis-based RTS on 10 projects, compared with using each technique alone. Combining ML-based RTS with two analysis-based RTS techniques-Ekstazi and STARTS-selects 25.34% and 21.44% fewer tests, respectively. CCS CONCEPTS * Software and its engineering $\\rightarrow$Software testing and debugging.", "published_in": "2022 IEEE/ACM International Conference on Automation of Software Test (AST)", "publisher": "IEEE/ACM", "doi": "", "date": "2022-04-01", "tcp": "", "tcs": "X", "tsr": "", "tsa": "", "ind_motivation": "TRUE", "ind_evaluation": "FALSE", "exp_subjects": "Open-source, unclear scale\n\n10 open-source Java programs", "prog_language": "Java", "ind_partner": "", "ind_author": "FALSE", "prac_feedback": "FALSE", "avai_tool": "TRUE\n\nReplication package, poorly documented", "put_practice": "FALSE", "suppl_url": "https://github.com/EngineeringSoftware/predictiverts", "approach": "hybrid selection approach that combines code analysis with ML", "info_approach": "Change-based", "alg_approach": "Machine learning-based", "metrics": "- percentage of tests that is selected\n'- time to select tests and time to run them", "effe_metrics": "Selection/reduction count/percentage, Testing time", "effi_metrics": "Execution time, Total/End-to-end time", "other_metrics": "", "open_challenges": "- difficulty in creating the training set (they use mutation)\n'- combining other criteria for selection"}