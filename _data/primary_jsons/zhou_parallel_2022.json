{"type": "primary", "year": "2021", "authors": "Zhou, Jianyi; Chen, Junjie; Hao, Dan", "author_keys": ["zhou_jianyi", "chen_junjie", "hao_dan"], "title": "Parallel Test Prioritization", "bibtex": "zhou_parallel_2022", "abstract": "Although regression testing is important to guarantee the software quality in software evolution, it suffers from the widely known cost problem. To address this problem, existing researchers made dedicated efforts on test prioritization, which optimizes the execution order of tests to detect faults earlier; while practitioners in industry leveraged more computing resources to save the time cost of regression testing. By combining these two orthogonal solutions, in this article, we define the problem of parallel test prioritization, which is to conduct test prioritization in the scenario of parallel test execution to reduce the cost of regression testing.Different from traditional sequential test prioritization, parallel test prioritization aims at generating a set of test sequences, each of which is allocated in an individual computing resource and executed in parallel. In particular, we propose eight parallel test prioritization techniques by adapting the existing four sequential test prioritization techniques, by including and excluding testing time in prioritization.To investigate the performance of the eight parallel test prioritization techniques, we conducted an extensive study on 54 open-source projects and a case study on 16 commercial projects from Baidu, a famous search service provider with 600M monthly active users. According to the two studies, parallel test prioritization does improve the efficiency of regression testing, and cost-aware additional parallel test prioritization technique significantly outperforms the other techniques, indicating that this technique is a good choice for practical parallel testing. Besides, we also investigated the influence of two external factors, the number of computing resources and time allowed for parallel testing, and find that more computing resources indeed improve the performance of parallel test prioritization. In addition, we investigated the influence of two more factors, test granularity and coverage criterion, and find that parallel test prioritization can still accelerate regression testing in parallel scenario. Moreover, we investigated the benefit of parallel test prioritization on the regression testing process of continuous integration, considering both the cumulative acceleration performance and the overhead of prioritization techniques, and the results demonstrate the superiority of parallel test prioritization.", "published_in": "ACM Trans. Softw. Eng. Methodol.", "publisher": "Association for Computing Machinery", "doi": "10.1145/3471906", "date": "2021-09-28", "tcp": "X", "tcs": "", "tsr": "", "tsa": "", "ind_motivation": "TRUE", "ind_evaluation": "TRUE", "exp_subjects": "Industrial proprietary, large scale\nOpen-source, large scale\n\n54 open-source Java projects (up to 120k LOC, 5623 TCs)\n\n5 projects from Baidu (> 500k LOC, up to 4246 TCs)", "prog_language": "Java", "ind_partner": "Baidu (China)", "ind_author": "FALSE", "prac_feedback": "FALSE", "avai_tool": "TRUE\n\nReplication package, documented", "put_practice": "FALSE", "suppl_url": "https://github.com/PTCP/PTCP", "approach": "cost-unaware: greedy, search-based, adaptive\n\ncost-aware: greedy, search-based, adaptive", "info_approach": "Cost-aware", "alg_approach": "Search-based, Greedy", "metrics": "APFD, modified APFDc, FT (first fault), AT (all faults), overhead", "effe_metrics": "Average Percentage of Faults Detected (APFD), Time/tests To First Failure", "effi_metrics": "Execution time", "other_metrics": "", "open_challenges": "adopt more efficient sequential TCP techniques in parallel scenario"}