{"type": "primary", "year": "2018", "authors": "Zhu, Yuecai; Shihab, Emad; Rigby, Peter C.", "author_keys": ["zhu_yuecai", "shihab_emad", "rigby_peter_c"], "title": "Test re-prioritization in continuous testing environments", "bibtex": "zhu_test_2018", "abstract": "New changes are constantly and concurrently being made to large software systems. In modern continuous integration and deployment environments, each change requires a set of tests to be run. This volume of tests leads to multiple test requests being made simultaneously, which warrant prioritization of such requests. Previous work on test prioritization schedules queued tests at set time intervals. However, after a test has been scheduled it will never be reprioritized even if new higher risk tests arrive. Furthermore, as each test finishes, new information is available which could be used to reprioritize tests. In this work, we use the conditional failure probability among tests to reprioritize tests after each test run. This means that tests can be reprioritized hundreds of times as they wait to be run. Our approach is scalable because we do not depend on static analysis or coverage measures and simply prioritize tests based on their co-failure probability distributions. We named this approach CODYNAQ and in particular, we propose three prioritization variants called CODYNAQSINGLE, CODYNAQDOUBLE and CODYNAQFLEXI. We evaluate our approach on two data sets, CHROME and Google testing data. We find that our co-failure dynamic re-prioritization approach, CODYNAQ, outperforms the default order, FIFOBASELINE, finding the first failure and all failures for a change request by 31% and 62% faster, respectively. CODYNAQ also outperforms GOOGLETCP by finding the first failure 27% faster and all failures 62% faster. \u00a9 2018 IEEE.", "published_in": "2018 IEEE International Conference on Software Maintenance and Evolution (ICSME)", "publisher": "IEEE", "doi": "10.1109/ICSME.2018.00016", "date": "2018-11-12", "tcp": "X", "tcs": "", "tsr": "", "tsa": "", "ind_motivation": "TRUE", "ind_evaluation": "TRUE", "exp_subjects": "GSDTSR (up to 2.4k requests per minute), data scraped from the Chromium project (up to 149 requests per minute)\n\nIndustrial open-source, large scale", "prog_language": "Unclear", "ind_partner": "", "ind_author": "FALSE", "prac_feedback": "FALSE", "avai_tool": "FALSE", "put_practice": "FALSE", "suppl_url": "", "approach": "Co-failure distributions", "info_approach": "Fault-based", "alg_approach": "", "metrics": "FirstFail, AllFail, delayed failures (goal: speed up detection of first/all failure)", "effe_metrics": "Time/tests To First Failure", "effi_metrics": "", "other_metrics": "", "open_challenges": "Evaluate on other projects; continue to examine failure distributions; explore use of other prioritization techniques."}