{"type": "secondary", "year": "2016", "authors": "Do, Hyunsook", "author_keys": ["do_hyunsook"], "title": "Recent advances in regression testing techniques", "bibtex": "do_recent_2016", "abstract": "Software systems and their environment change are continuous. They are enhanced, corrected, and ported to new platforms. These changes can affect a system adversely, thus software engineers perform regression testing to ensure the quality of the modified systems. Regression testing is an integral part of most major software projects, but as projects grow larger and the number of tests increases, performing regression testing becomes more costly. To address this problem, many researchers and practitioners have proposed and empirically evaluated various regression testing techniques, such as regression test selection, test case prioritization, and test suite minimization. Recent surveys on these techniques indicate that this research area continues to grow, heuristics and the types of data utilized become diverse, and wider application domains have been considered. This chapter presents the current status and the trends of three regression testing techniques and discusses recent advances of each technique.", "published_in": "Advances in Computers", "publisher": "Elsevier", "doi": "10.1016/bs.adcom.2016.04.004", "date": "2016-05-10", "tcp": "X", "tcs": "X", "tsr": "X", "tsa": "", "paper_count": "12", "years_covered": "2010-2016", "systematic": "", "approach": "For RTS:\n- Firewall;\n- Graph walking;\n- Data-flow analysis;\n- Model-based;\n- Integer programming;\n- Symbolic execution;\n- Slicing.\n\nFor TCP:\n- Code coverage;\n- History;\n- Requirements;\n- Model-based;\n- Human-based;\n- Interatcion;\n- Probabilistic;\n- Distribution;\n- Cost-aware.\n\nFor TSM:\n- Code coverage;\n- Model-based;\n- Graph-based.", "metrics": "For RTS:\n- no. of selected tests;\n- Reduction rate;\n- Testing time;\n- Precision/recall;\n- Total time;\n- Cost-benefit analysis.\n\nFor TCP:\n- APFD;\n- APFDc;\n- NAPFD;\n- Most likely relative position;\n- Coverage effectiveness;\n- Cost models similar to the ones from RTS.\n\nFor TSM:\n- Reduction rate;\n- Loss of fault detection ability;\n- Loss of code coverage;\n- Execution time.", "conclusions": "- Most early studies in the field used the Siemens programs as benchmark; researchers should use SIR instead.\n- Recently, more research is focusing on industrial programs, or open source programs of differenty types.\n- The trend is increase variety in algorithmic techniques and input sources, as they have different pros and cons.", "open_challenges": "- Gap in technology transfer to industry;\n- Techniques must be developed considering industrial testing environments."}