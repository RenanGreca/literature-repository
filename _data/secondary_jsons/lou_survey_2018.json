{"year": "2019", "authors": "Lou, Yiling; Chen, Junjie; Zhang, Lingming; Hao, Dan", "title": "A Survey on Regression Test-Case Prioritization", "bibtex": "lou_survey_2018", "abstract": "Regression testing is crucial for ensuring the quality of modern software systems, but can be extremely costly in practice. Test-case prioritization has been proposed to improve the effectiveness of regression testing by scheduling the execution order of test cases to detect regression bugs faster. Since its first proposal, test-case prioritization has been intensively studied in the literature. In this chapter, we perform an extensive survey and analysis on existing test-case prioritization techniques, as well as pointing out future directions for test-case prioritization. More specifically, we collect 191 papers on test-case prioritization from 1997 to 2016 and conduct a detailed survey to systematically investigate these work from six aspects, i.e., algorithms, criteria, measurements, constraints, empirical studies, and scenarios. For each of the six aspects, we discuss the existing work and the trend during the evolution of test-case prioritization. Furthermore, we discuss the current limitations/issues in test-case prioritization research, as well as potential future directions on test-case prioritization. Our analyses provide the evidence that test-case prioritization topic is attracting increasing interests, while the need for practical test-case prioritization tools remains.", "published_in": "Advances in Computers", "publisher": "Elsevier", "doi": "10.1016/bs.adcom.2018.10.001", "date": "2018-12-14", "tcp": "X", "tcs": "", "tsr": "", "tsa": "", "paper_count": "191", "years_covered": "1997-2016", "systematic": "X", "approach": "The TCP approaches are classified based on different categories:\n\nCRITERION:\nStructural, Model-Level, Fault-Related, Test Input-Based, Change Impact-Based, Risk, Similarity, Service History, Requirement\n\nPRIORITIZATION ALGORITHM:\ngreedy algorithm, search-based algorithm, information-retrieval-based algorithm, integrate-linear-programming-based algorithm, machine-learning-based algorithm.\n\nAPPLICATION SCENARIO:\nGeneral TCP vs Version-Specific TCP", "metrics": " - Most of the surveyed work uses APFD\n\n - APFDc, APXC, NAPFD and RAPFD are variations of APFD\n\n - Weighted gain of faults detected (WGFD): the idea is to weight and sum fault-detection rates of different test cases so as to define \u201cfastness\u201d in different testing scenarios\n\n - Harmonic mean of the rate of fault detection (HMFD): to measure how quickly a prioritized TS can detect faults, independent from the size of TS.", "conclusions": "While the topic of test case prioritization remains attractive to researchers the need for practical test case prioritization tools remains.\n\nMany studies do not consider important aspects while evaluating TCP: the use of real-world software as subjects, algorithm complexity, cost of collecting data, efficiency (these could also be cosidered as \"open challenges\")", "open_challenges": " - Most of the widely used testing criteria are either less precise or costly\n\n - Too much reliance on APFD (what about APFDc, TTFF, TTLF?)\n\n - Algorithm complexity not considered\n\n - Cost of collecting necessary data\n\n - Lack of evaluation on real software with real faults\n\n- The efficiency measurement is mostly ignored in TCP\n\n - Lack of available, effective and easy-to-use TCP tools.\n\n - Intermediate vs ultimate goal"}