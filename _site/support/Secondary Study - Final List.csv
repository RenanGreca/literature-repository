Core metadata,,,,Additional metadata,,,,,,,Notes,,,,Categorization,,,,,,,,Applicability concerns,,,,,,,,,,,Findings,,,,Author updates,,,,
Year,Authors,Title,bibtex,Abstract,Published in,Publisher,Source,DOI,Publication date,,Antonia,Breno,Renan,,Broad Categories,Orchestration problem?,TCP,TCS,TSR,TSA,Context?,,Industry motivation?,Industry evaluation?,Experiment subjects,Industry partner,Industrial author,Practitioners feedback,Available tool?,Put into practice?,Supplementary material,Included?,,Approach,Metrics,Open challenges,,Answered by,Tool URL,Put into practice?,Useful metrics?,Additional notes
2016,"Srikanth, Hema; Hettiarachchi, Charitha; Do, Hyunsook",Requirements Based Test Prioritization Using Risk Factors,srikanth_requirements_2016,"Context Software testing is an expensive and time-consuming process. Software engineering teams are often forced to terminate their testing efforts due to budgetary and time constraints, which inevitably lead to long term issues with quality and customer satisfaction. Test case prioritization (TCP) has shown to improve test effectiveness. Objective The results of our prior work on requirements-based test prioritization showed improved rate of fault detection on industrial projects; the customer priority (CP) and the fault proneness (FP) were the biggest contributing factors to test effectiveness. The objective of this paper is to further investigate these two factors and apply prioritization based on these factors in a different domain: an enterprise level cloud application. We aim to provide an effective prioritization scheme that practitioners can implement with minimum effort. The other objective is to compare the results and the benefits of these two factors with two risk-based prioritization approaches that extract risks from the system requirements categories. Method Our approach involved analyzing and assigning values to each requirement based on two important factors, CP and FP, so that the test cases for high-value requirements are prioritized earlier for execution. We also proposed two requirements-based TCP approaches that use risk information of the system. Results Our results indicate that the use of CP and FP can improve the effectiveness of TCP. The results also show that the risk-based prioritization can be effective in improving the TCP. Conclusion We performed an experiment on an enterprise cloud application to measure the fault detection rate of different test suites that are prioritized based on CP, FP, and risks. The results depict that all approaches outperform the random prioritization approach, which is prevalent in the industry. Furthermore, the proposed approaches can easily be used in the industry to address the schedule and budget constraints at the testing phase.",Information and Software Technology,Elsevier,Query,10.1016/j.infsof.2015.09.002,2015-09-26,,,,submitted in 2015; published in 2016,,Orchestration technique,Prioritization,X,,,,,,TRUE,TRUE,IBM analytics application (1700+ TCs),IBM (USA),TRUE,FALSE,FALSE,FALSE,,TRUE,,Requirements-based,APFD,Apply different levels of severity to faults.,,Hyunsook Do,N/A,No,N/A,
2016,"Noor, Tanzeem Bin; Hemmati, Hadi",A similarity-based approach for test case prioritization using historical failure data,noor_similarity-based_2016,"Test case prioritization is a crucial element in software quality assurance in practice, specially, in the context of regression testing. Typically, test cases are prioritized in a way that they detect the potential faults earlier. The effectiveness of test cases, in terms of fault detection, is estimated using quality metrics, such as code coverage, size, and historical fault detection. Prior studies have shown that previously failing test cases are highly likely to fail again in the next releases, therefore, they are highly ranked, while prioritizing. However, in practice, a failing test case may not be exactly the same as a previously failed test case, but quite similar, e.g., when the new failing test is a slightly modified version of an old failing one to catch an undetected fault. In this paper, we define a class of metrics that estimate the test cases quality using their similarity to the previously failing test cases. We have conducted several experiments with five real world open source software systems, with real faults, to evaluate the effectiveness of these quality metrics. The results of our study show that our proposed similarity-based quality measure is significantly more effective for prioritizing test cases compared to existing test case quality measures. © 2015 IEEE.",2015 IEEE 26th International Symposium on Software Reliability Engineering (ISSRE),IEEE,Query,10.1109/ISSRE.2015.7381799,2016-01-14,,,,"More than a technique, they’re proposing different kinds of similarity as a prioritization metric",,Orchestration technique,Prioritization,X,,,,,,TRUE,FALSE,Defects4J (up to 7927 TCs),,FALSE,FALSE,FALSE,FALSE,,TRUE,,"Similarity-based (BC, HD, ED)","Tests till first fault (%), method coverage, size of testcase",,,,,,,
2016,"Schwartz, Amanda; Do, Hyunsook",Cost-effective regression testing through adaptive test prioritization strategies,schwartz_cost-effective_2016,"We propose two new ATP (Adaptive Test Prioritization) strategies.We 
conduct an empirical study investigating existing and new ATP 
strategies.We provide a statistical analysis examining all ATP 
strategies proposed.Our findings show that FESART is the most consistent
 cost-effective ATP strategy. Regression testing is an important part of
 the software development life cycle. It is also very expensive. Many 
different techniques have been proposed for reducing the cost of 
regression testing. However, research has shown that the effectiveness 
of different techniques varies under different testing environments and 
software change characteristics. In prior work, we developed strategies 
to investigate ways of choosing the most cost-effective regression 
testing technique for a particular regression testing session. In this 
work, we empirically study the existing strategies presented in prior 
work as well as develop two additional Adaptive Test Prioritization 
(ATP) strategies using fuzzy analytical hierarchy process (AHP) and the 
weighted sum model (WSM). We also provide a comparative study examining 
each of the ATP strategies presented to date. This research will provide
 researchers and practitioners with strategies to utilize in regression 
testing plans as well as provide data to use when deciding which of the 
strategies would best fit their testing needs. The empirical studies 
provided in this research show that utilizing these strategies can 
improve the cost-effectiveness of regression testing.",Journal of Systems and Software,Elsevier,backward,10.1016/j.jss.2016.01.018,2016-01-27,,X,,,,Orchestration technique,,X,,,,Continuous integration,,TRUE,FALSE,SIR (up to 912 TCs),,FALSE,FALSE,FALSE,FALSE,,TRUE,,Approach is adaptively chosen for each software and even version using some decision support system,Eelative cost-benefit (in dollars) among compared TCP techniques,"Expand to other techniques, and to larger programs.",,Hyunsook Do,N/A,No,N/A,
2016,"Hirzel, Matthias; Klaeren, Herbert",Graph-walk-based selective regression testing of web applications created with Google web toolkit,hirzel_graph-walk-based_2016,"Modern web applications are usually based on JavaScript. Due to its loosely typed, dynamic nature, test execution is time expensive and costly. Techniques for regression testing and fault-localization as well as frameworks like the Google Web Toolkit (GWT) ease the develop- ment and testing process, but still require approaches to reduce the testing effort. In this paper, we investigate the efficiency of a spe- cialized, graph-walk based selective regression testing technique that aims to detect code changes on the client side in order to determine a reduced set of web tests. To do this, we analyze web applications created with GWT on different precision levels and with varying looka- heads. We examine how these parameters affect the localization of client-side code changes, run time, memory consumption and the num- ber of web tests selected for re-execution. In addition, we propose a dynamic heuristics which targets an analysis that is as exact as possible while reducing memory consumption. The results are partially appli- cable on non-GWT applications. In the context of web applications,we see that the efficiency relies to a great degree on both the structure of the application and the code modifications, which is why we propose further measures tailored to the results of our approach.",Software Engineering Workshops 2016,CEUR,backward,http://ceur-ws.org/Vol-1559/paper05.pdf,2016-02-17,,X,,,,Orchestration technique,,,X,,,Web applications,,FALSE,TRUE,Hupa (32 TCs) and Meisterplan (104 TCs),,FALSE,FALSE,TRUE,FALSE,https://github.com/MH42/srt-for-web-apps,TRUE,,Graph-based,"Time/memory consumption, selection percentage",,,,,,,
2016,"Lu, Yafeng; Lou, Yiling; Cheng, Shiang; Zhang, Lingming; Hao, Dan; Zhou, Yangfan; Zhang, Lu",How does regression test prioritization perform in real-world software evolution?,lu_how_2016,"In recent years, researchers have intensively investigated various topics in test prioritization, which aims to re-order tests to increase the rate of fault detection during regression testing. While the main research focus in test prioritization is on proposing novel prioritization techniques and evaluating on more and larger subject systems, little effort has been put on investigating the threats to validity in existing work on test prioritization. One main threat to validity is that existing work mainly evaluates prioritization techniques based on simple artificial changes on the source code and tests. For example, the changes in the source code usually include only seeded program faults, whereas the test suite is usually not augmented at all. On the contrary, in real-world software development, software systems usually undergo various changes on the source code and test suite augmentation. Therefore, it is not clear whether the conclusions drawn by existing work in test prioritization from the artificial changes are still valid for real-world software evolution. In this paper, we present the first empirical study to investigate this important threat to validity in test prioritization. We reimplemented 24 variant techniques of both the traditional and time-aware test prioritization, and investigated the impacts of software evolution on those techniques based on the version history of 8 real-world Java programs from GitHub. The results show that for both traditional and time-aware test prioritization, test suite augmentation significantly hampers their effectiveness, whereas source code changes alone do not influence their effectiveness much.",ICSE '16: Proceedings of the 38th International Conference on Software Engineering,ACM,backward,10.1145/2884781.2884874,2016-05-14,,,,"Here they discuss a potential threat to validity on the validation of other TCP techniques. The claim is that experiments with seeded faults are not comparable to a real scenario where tests are being added and changed in each version of a software.

They claim that proposed TCP techniques are not as effective in this realistic scenario compared to the results shown in previous experiments.",,,,X,,,,,,TRUE,TRUE,Open-source Java programs (up to 5269 TCs),,FALSE,FALSE,TRUE,FALSE,https://personal.utdallas.edu/~lxz144130/icse16support.html,TRUE,,"greedy, search-based, adaptive, time-aware",APFD,,,Yiling Lou,https://personal.utdallas.edu/~lxz144130/icse16support.html,No,N/A,Contact OK
2016,"Vöst, Sebastian; Wagner, Stefan",Trace-based test selection to support continuous integration in the automotive industry,vost_trace-based_2016,"System testing in the automotive industry is a very expensive and time-consuming task of growing importance, because embedded systems in the domain are distributed over numerous controllers (ECUs). Modern software development techniques such as continuous integration require regular, repeated and fast testing. To achieve this in the automotive domain, test suites for a specific software change must be tailored. We propose a novel test selection technique for system-level functions in the automotive industry based on component and communication models. The idea is to follow input and output signals that are used in the testing steps through the ECUs implementing a function. We select only those tests for a planned integration in which at least one of the signals sent in its steps is processed by the ECU that was changed and thus triggered the integration. The technique is well-suited for black-box testing since it requires only the full test suite specification and the system architecture. We applied the technique to a test suite of the Active Cruise Control function at BMW Group in the context of hardware-in-the-loop system testing and found the possible reduction rates to be 82.3% on average in comparison to the full test suite. Possible future work includes the evaluation with a wider set of functions, the evaluation of the fault detection rate, further automation and combination with other test selection techniques.",CSED '16: Proceedings of the International Workshop on Continuous Software Evolution and Delivery,ACM,Query,10.1145/2896941.2896951,2016-05-14,,,,Automotive CI and RT is somewhat of a unique challenge.,,Orchestration technique/Context-specific,Selection,,X,,,"Continuous integration, automotive",,TRUE,TRUE,BMW adaptive cruise control (186 TCs),BMW (Germany),TRUE,FALSE,FALSE,FALSE,,TRUE,,Trace-based,Selection rate,,,Stefan Wagner,Proprietary,Yes for some time; not currently in use after a role change of the tool's champion.,Yes,Contact OK
2016,"Wang, Shuai; Ali, Shaukat; Yue, Tao; Bakkeli, Oyvind; Liaaen, Marius",Enhancing test case prioritization in an industrial setting with resource awareness and multi-objective search,wang_enhancing_2016,"Test case prioritization is an essential part of test execution systems for large organizations developing software systems in the context that their software versions are released very frequently. They must be tested on a variety of compatible hardware with different configurations to ensure correct functioning of a software version on a compatible hardware. In practice, test case execution must not only execute cost-effective test cases in an optimal order, but also optimally allocate required test resources, in order to deliver high quality software releases. To optimize the current test execution system for testing software releases developed for Videoconferencing Systems (VCSs) at Cisco, Norway, in this paper, we propose a resource-aware multi-objective optimization solution with a fitness function defined based on four cost-effectiveness measures. In this context, a set of software releases must be tested on a set of compatible VCS hardware (test resources) by executing a set of cost-effective test cases in an optimal order within a given test cycle constrained by maximum allowed time budget and maximum available test resources. We empirically evaluated seven search algorithms regarding their performance and scalability by comparing with the current practice (random ordering (RO)). The results show that the proposed solution with the best search algorithm (i.e., Random-Weighted Genetic Algorithm) improved the current practice by reducing on average 40.6% of time for test resource allocation and test case execution, improved test resource usage on average by 37.9% and fault detection on average by 60%.",ICSE '16: Proceedings of the 38th International Conference on Software Engineering Companion,ACM,Query,10.1145/2889160.2889240,2016-05-14,,,,"It's Simula with Cisco, but doesn't seem specific to SPL.",,Orchestration technique,Prioritization,X,,,,Software product line,,TRUE,TRUE,Cisco videoconferencing system (305 TCs),Cisco (Norway),TRUE,FALSE,FALSE,MAYBE,,TRUE,,"resource-aware, multi-objective search","Number of test cases, resource usage, fault detection capability, total time, prioritization density",Further industrial case studies; survey with Cisco engineers for validation and application of approach.,,,,,,
2016,"Srikanth, Hema; Cashman, Mikaela; Cohen, Myra B.",Test Case Prioritization of Build Acceptance Tests for an Enterprise Cloud Application,srikanth_test_2016,"The use of cloud computing brings many new opportunities for companies to deliver software in a highly-customizable and dynamic way. One such paradigm, Software as a Service (SaaS), allows users to subscribe and unsubscribe to services as needed. While beneficial to both subscribers and SaaS service providers, failures escaping to the field in these systems can potentially impact an entire customer base. Build Acceptance Testing (BAT) is a black box technique performed to validate the quality of a SaaS system every time a build is generated. In BAT, the same set of test cases is executed simultaneously across many different servers, making this a time consuming test process. Since BAT contains the most critical use cases, it may not be obvious which tests to perform first, given that the time to complete all test cases across different servers in any given day may be insufficient. While all tests must be eventually run, it is critical to run those tests first which are likely to find failures. In this work, we ask if it is possible to prioritize BAT tests for improved time to fault detection and present several different approaches, each based on the services executed when running each BAT. In an empirical study on a production enterprise system, we first analyze the historical data from several months in the field, and then use that data to derive the prioritization order for the current development BATs. We then examine if the orders change significantly when we consider fault severity using a cost-based prioritization metric. We find that the prioritization order in which we run the tests does matter, and that the use of historical information is a good heuristic for this order. Prioritized tests have an increase in the rate of fault detection, with the average percent of faults detected (APFD) increasing from less than 0.30 to as high as 0.77 on a scale of zero to one. Although severity slightly changes which order performs best, we see that there are clusters of orderings, ones which improve time to early fault detection ones which don't.",Journal of Systems and Software,Elsevier,Query,10.1016/j.jss.2016.06.017,2016-06-16,,,"Despite the industrial evaluation, the work basically evaluates 3 history-based TCP heuristics. No orchestration.",,,Orchestration technique/Context-specific,,X,,,,Prioritizing Build Acceptance Tests based on historical ﬁeld failures,,TRUE,TRUE,IBM cloud application (1000+ TCs),IBM (USA),TRUE,FALSE,FALSE,FALSE,,TRUE,,3 history-based TCP heuristics.,APFD and APFDc," - investigate the use of in-house defects when ﬁeld failures data is not available.
 - evaluate systems where running times of individual test cases are different.",,,,,,
2016,"Pradhan, Dipesh; Wang, Shuai; Ali, Shaukat; Yue, Tao",Search-Based Cost-Effective Test Case Selection within a Time Budget: An Empirical Study,pradhan_search-based_2016,"Due to limited time and resources available for execution, test case selection always remains crucial for cost-effective testing. It is even more prominent when test cases require manual steps, e.g., operating physical equipment. Thus, test case selection must consider complicated trade-offs between cost (e.g., execution time) and effectiveness (e.g., fault detection capability). Based on our industrial collaboration within the Maritime domain, we identified a real-world and multi-objective test case selection problem in the context of robustness testing, where test case execution requires human involvement in certain steps, such as turning on the power supply to a device. The high-level goal is to select test cases for execution within a given time budget, where test engineers provide weights for a set of objectives, depending on testing requirements, standards, and regulations. To address the identified test case selection problem, we defined a fitness function including one cost measure, i.e., Time Difference (TD) and three effectiveness measures, i.e., Mean Priority (MPR), Mean Probability (MPO) and Mean Consequence (MC) that were identified together with test engineers. We further empirically evaluated eight multi-objective search algorithms, which include three weight-based search algorithms (e.g., Alternating Variable Method) and five Pareto-based search algorithms (e.g., Strength Pareto Evolutionary Algorithm 2 (SPEA2)) using two weight assignment strategies (WASs). Notice that Random Search (RS) was used as a comparison baseline. We conducted two sets of empirical evaluations: 1) Using a real world case study that was developed based on our industrial collaboration; 2) simulating the real world case study to a larger scale to assess the scalability of the search algorithms. Results show that SPEA2 with either of the WASs performed the best for both the studies. Overall, SPEA2 managed to improve on average 32.7%, 39% and 33% in terms of MPR, MPO and MC respectively as compared to RS.",GECCO '16: Proceedings of the Genetic and Evolutionary Computation Conference 2016,ACM,Query,10.1145/2908812.2908850,2016-07-20,,,,,,Orchestration technique,Selection,,X,,,,,TRUE,TRUE,"Realistic case study based on standards, public requirements and a handbook (165 TCs)",Undisclosed oil & gas company (Norway),FALSE,FALSE,FALSE,FALSE,,TRUE,,Search-based,"fitness value, hypervolume",Hybrid search and evolutionary algorithms for better performance.,,,,,,
2016,"Chen, Junjie; Bai, Yanwei; Hao, Dan; Xiong, Yingfei; Zhang, Hongyu; Zhang, Lu; Xie, Bing",Test case prioritization for compilers: A text-vector based approach,chen_test_2016,"Test case prioritization aims to schedule the execution order of test cases so as to detect bugs as early as possible. For compiler testing, the demand for both effectiveness and efficiency imposes challenge to test case prioritization. In the literature, most existing approaches prioritize test cases by using some coverage information (e.g., statement coverage or branch coverage), which is collected with considerable extra effort. Although input-based test case prioritization relies only on test inputs, it can hardly be applied when test inputs are programs. In this paper we propose a novel text-vector based test case prioritization approach, which prioritizes test cases for C compilers without coverage information. Our approach first transforms each test case into a text-vector by extracting its tokens which reflect fault-relevant characteristics and then prioritizes test cases based on these text-vectors. In particular, in our approach we present three prioritization strategies: greedy strategy, adaptive random strategy, and search strategy. To investigate the efficiency and effectiveness of our approach, we conduct an experiment on two C compilers (i.e., GCC and LLVM), and find that our approach is much more efficient than the existing approaches and is effective in prioritizing test cases.","2016 IEEE International Conference on Software Testing, Verification and Validation (ICST)",IEEE,backward,10.1109/ICST.2016.19,2016-07-21,,X,,,,Orchestration technique,,X,,,,Test of C compilers,,TRUE,TRUE,C compilers GCC (3.3M LOC) and LLVM (4.7M LOC),,TRUE,FALSE,FALSE,FALSE,,TRUE,,text-vector based (similarity),"-APFD
-time spent in prioritization",n/a,,,,,,
2016,"Buchgeher, Georg; Klammer, Claus; Heider, Wolfgang; Schuetz, Martin; Huber, Heinz",Improving testing in an enterprise SOA with an architecture-based approach,buchgeher_improving_2016,"High resource demand for system testing is a major obstacle for continuous delivery. This resource demand can be reduced by prioritizing test cases, e.g., by focusing on tests that cover a lot of functionality. For large-scale systems, like an enterprise SOA, defining such test cases can be difficult for the tester because of the lack of relevant knowledge about the system. We propose an approach for test case prioritization and selection that is based on architectural viewpoint that provides software testers with the required architectural information. We outline how architectural information is used for defining and selecting prioritized test cases. The approach has been developed in close cooperation with the provider of an enterprise SOA in the banking domain in Austria following an action research approach. In addition, the approach has been validated in an industrial case study. Validation showed that there is no further need for manual architectural analysis to be able to prioritize and select test cases. We also show the limitations of our approach as it is based on static code analysis. © 2016 IEEE.",2016 13th Working IEEE/IFIP Conference on Software Architecture (WICSA),IEEE,Query,10.1109/WICSA.2016.24,2016-07-21,,,,"They claim to have designed an ""architectural viewpoint"", but the definition of this is not clear to me. It seems like a tool to auxiliate developers to perform prioritization/selection manually. So somewhat of a semi-automated approach. From the conclusion: ""Currently, TePSEx is used by software testers for defining and managing relevant test cases manually. We also plan to use the information provided by TePSEx for automated test case generation as well as for automated execution of relevant tests.""",,Orchestration technique/Context-specific,Selection and prioritization,X,X,,,General(Java),,TRUE,TRUE,Undisclosed projects from RSG,Raiffeisen Software GmbH (Austria),TRUE,FALSE,FALSE,TRUE,,TRUE,,model-based,Load factor?,Combine different information sources to improve TCP+TCS; incorporate system evolution information; use derived information towards test case generation,,Georg Buchgeher,Proprietary,Attempted; not currently in use. Author notes they observed a substantial gap between a research prototype and an industrial ready tool.,Yes,
2016,"Tahvili, Sahar; Saadatmand, Mehrdad; Larsson, Stig; Afzal, Wasif; Bohlin, Markus; Sundmark, Daniel",Dynamic integration test selection based on test case dependencies,tahvili_dynamic_2016,"Prioritization, selection and minimization of test cases are well-known problems in software testing. Test case prioritization deals with the problem of ordering an existing set of test cases, typically with respect to the estimated likelihood of detecting faults. Test case selection addresses the problem of selecting a subset of an existing set of test cases, typically by discarding test cases that do not add any value in improving the quality of the software under test. Most existing approaches for test case prioritization and selection suffer from one or several drawbacks. For example, they to a large extent utilize static analysis of code for that purpose, making them unfit for higher levels of testing such as integration testing. Moreover, they do not exploit the possibility of dynamically changing the prioritization or selection of test cases based on the execution results of prior test cases. Such dynamic analysis allows for discarding test cases that do not need to be executed and are thus redundant. This paper proposes a generic method for prioritization and selection of test cases in integration testing that addresses the above issues. We also present the results of an industrial case study where initial evidence suggests the potential usefulness of our approach in testing a safety-critical train control management subsystem.","2016 IEEE Ninth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)",IEEE,backward,10.1109/ICSTW.2016.14,2016-08-04,,,X,,,,,X,X,,,Combined static and dynamic selection and prioritization of integration tests,,TRUE,TRUE,Brake and air supply systems from Bombardier,Bombardier Transportation (Sweden),FALSE,TRUE,N/A,MAYBE,,TRUE,,"The work combines offline prioritization with online selection from the prioritized sets. 
This work is related to row 5 and here test case dependencies are also captured manually.","Requirement coverage; time efficiency; cost efficiency; fault detection probability. Introduces a ""dependency degree"" metric for prioritizing test cases; these are not an evaluation metric, but rather metrics attributed to each test case used by the TCP algorithm.",n/a,,Daniel Sundmark,N/A,"There was an attempt, but not currently in use.",N/A,
2016,"Cláudio Magalhães, Alexandre Mota, Flávia Barros, and Eliot Maia",Automatic selection of test cases for regression testing,magalhaes_automatic_2016,"Regression testing is a safety measure to attest that changes made on a system preserve prior accepted behavior. Identifying which test cases must compose a regression test suite in a certain development stage is tricky, particularly when one only has test cases and change requests described in natural language, and the execution of the test suite will be performed manually. That is the case of our industrial partner. We propose a selection of regression test cases based on information retrieval and implement as a web-service. In performed experiments, we show that we can improve the creation of regression test suites of our industrial partner by providing more effective test cases based on keywords analysis in an automatic way.",SAST: Proceedings of the 1st Brazilian Symposium on Systematic and Automated Software Testing,ACM,backward,10.1145/2993288.2993299,2016-09-19,,,X,,,Technique analysis,,,X,,,An information retrieval-based TCS approach.,,TRUE,TRUE,Test repository from Motorola (up to 427 TCs),Motorola Mobility (Brazil),TRUE,TRUE,FALSE,TRUE,,TRUE,,An information retrieval-based TCS approach.,"Traditional information retrieval-based metrics such as recall, number (and %) of elements returned at the top of the list (top-n)."," - to completely replace the manual TCS approach with the automated one
 - try other variants of the merge strategy
 - Include source code as an input artefact
 - evaluate the effect of the derived TS on coverage",,Claudio Magalhães,Proprietary,"Yes, the tool is currently in use at Motorola in Brazil.","Yes. Further metrics are in a follow-up paper, and ""time spent"" was also evaluated.",Contact OK
2016,"Aman, Hirohisa; Tanaka, Yuta; Nakano, Takashi; Ogasawara, Hideto; Kawahara, Minoru",Application of Mahalanobis-Taguchi Method and 0-1 Programming Method to Cost-Effective Regression Testing,aman_application_2016,"To enhance the cost effectiveness of regression testing, this paper proposes a method for prioritizing test cases. In general, a test case can be evaluated from various different points of view, therefore whether it is worth it to re-run should be discussed using multi criteria. This paper shows that the Mahalanobis-Taguchi (MT) method is a useful way to successfully integrate different evaluations of a test case. Moreover, this paper proposes to use the 0-1 programming method together with the MT method in order to take into account not only the priority of a test case but also its cost to run. The empirical study with 300 test cases for an industrial software system shows that the combination of the MT method and the 0-1 programming method is more cost-effective than other conventional methods. © 2016 IEEE.",2016 42th Euromicro Conference on Software Engineering and Advanced Applications (SEAA),IEEE,Query,10.1109/SEAA.2016.29,2016-10-18,,,,,,Orchestration technique,Prioritization,X,,,,General,,FALSE,TRUE,Undisclosed system from Toshiba (300 TCs),Toshiba (Japan),TRUE,FALSE,FALSE,MAYBE,,TRUE,,Similarity-based,"GLC (number of versions in which a certain test T was not run), failure rate",Apply in other software domains and compare with other TCP techniques.,,,,,,
2016,"Busjaeger, Benjamin; Xie, Tao",Learning for test prioritization: An industrial case study,busjaeger_learning_2016,"Modern cloud-software providers, such as Salesforce.com, increasingly adopt large-scale continuous integration envi-ronments. In such environments, assuring high developer productivity is strongly dependent on conducting testing efficiently and effectively. Specifically, to shorten feedback cycles, test prioritization is popularly used as an optimiza-tion mechanism for ranking tests to run by their likelihood of revealing failures. To apply test prioritization in indus-trial environments, we present a novel approach (tailored for practical applicability) that integrates multiple existing techniques via a systematic framework of machine learning to rank. Our initial empirical evaluation on a large real-world dataset from Salesforce.com shows that our approach significantly outperforms existing individual techniques.",FSE 2016: Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering,ACM,Query,10.1145/2950290.2983954,2016-11-01,,,,"A machine learning-based approach to TCP using code coverage, similarity, history and age.

This work is directly motivated by the Salesforce.com software. 

Their evaluation is also performed using data extracted from Salesforce, but is only performed in an experimental setting; the authors do not indicate that the approach has been incorporated into the Salesforce workflow, nor is the tool publicly available for use.

The paper is short and feels somewhat preliminary; perhaps there is a longer version.",,Case study,,X,,,,Web application,,TRUE,TRUE,Automation system at Salesforce (~45000 TCs),Salesforce (USA),TRUE,FALSE,FALSE,FALSE,,TRUE,,"Machine learning-based (algo)

Code coverage-based, similarity-based, history-based, test age (info)","APFD, recall","Deepen learning, adding more features.",,Benjamin Busjaeger,Proprietary,Currently in use at Salesforce,Yes,Contact OK
2016,"Yoshida, Hiroaki; Tokumoto, Susumu; Prasad, Mukul R.; Ghosh, Idradeep; Uehara, Tadahiro",FSX: A tool for fine-grained incremental unit test generation for C/C++ Programs,yoshida_fsx_2016,"Automated unit test generation bears the promise of significantly reducing test cost and hence improving software quality. However, the maintenance cost of the automatically generated tests presents a significant barrier to adoption of this technology. To address this challenge, in previous work, we proposed a novel technique for automated and fine-grained incremental generation of unit tests through minimal augmentation of an existing test suite. In this paper we describe a tool FSX, implementing this technique. We describe the architecture, user-interface, and salient features of FSX, and specific practical use-cases of its technology. We also report on a real, large-scale deployment of FSX as a practical validation of the underlying research contribution and of automated test generation research in general. © 2016 ACM.",FSE 2016: Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering,ACM,Query,10.1145/2950290.2983937,2016-11-01,,,,"This paper is on test suite augmentation, or incremental generation of test cases. There are few of these, should we include it as a 4th category?",,Orchestration technique,Augmentation,,,,X,,,TRUE,FALSE,Open-source tool iPerf (114 TCs),Fujitsu (Japan),TRUE,TRUE,FALSE,TRUE,,TRUE,,Coverage-based,"Statement coverage, branch coverage, #tests, runtime",n/a,,,,,,
2016,"Tahvili, Sahar; Bohlin, Markus; Saadatmand, Mehrdad; Larsson, Stig; Afzal, Wasif; Sundmark, Daniel",Cost-benefit analysis of using dependency knowledge at integration testing,tahvili_cost-benefit_2016,"In software system development, testing can take considerable time and resources, and there are numerous examples in the literature of how to improve the testing process. In particular, methods for selection and prioritization of test cases can play a critical role in efficient use of testing resources. This paper focuses on the problem of selection and ordering of integration-level test cases. Integration testing is performed to evaluate the correctness of several units in composition. Further, for reasons of both effectiveness and safety, many embedded systems are still tested manually. To this end, we propose a process, supported by an online decision support system, for ordering and selection of test cases based on the test result of previously executed test cases. To analyze the economic efficiency of such a system, a customized return on investment (ROI) metric tailored for system integration testing is introduced. Using data collected from the development process of a large-scale safety-critical embedded system, we perform Monte Carlo simulations to evaluate the expected ROI of three variants of the proposed new process. The results show that our proposed decision support system is beneficial in terms of ROI at system integration testing and thus qualifies as an important element in improving the integration testing process. © Springer International Publishing AG 2016.",PROFES 2016: Product-Focused Software Process Improvement,Springer,Query,10.1007/978-3-319-49094-6_17 ,2016-11-06,,X,,,,Orchestration technique,,X,,,,"Embedded systems
NL test cases",,TRUE,TRUE,Train control managment subsystem (4578 TCs),Bombardier Transportation (Sweden),FALSE,FALSE,N/A,FALSE,,TRUE,,the paper evaluates the ROI for the TCP approach proposed in row 42; here they build a cost model and compare the costs of using TCP or not. Note that the TCP uses dependencies among tests that are identifies manually,Return on investment,"- do study on real data and not on simulation
-consider other criteria for TCP",,Daniel Sundmark,N/A,"There was an attempt, but not currently in use.",N/A,
2016,"Strandberg, Per Erik; Sundmark, Daniel; Afzal, Wasif; Ostrand, Thomas J.; Weyuker, Elaine J.",Experience Report: Automated System Level Regression Test Prioritization Using Multiple Factors,strandberg_experience_2016,"We propose a new method of determining an effective ordering of regression test cases, and describe its implementation as an automated tool called SuiteBuilder developed by Westermo Research and Development AB. The tool generates an efficient order to run the cases in an existing test suite by using expected or observed test duration and combining priorities of multiple factors associated with test cases, including previous fault detection success, interval since last executed, and modifications to the code tested. The method and tool were developed to address problems in the traditional process of regression testing, such as lack of time to run a complete regression suite, failure to detect bugs in time, and tests that are repeatedly omitted. The tool has been integrated into the existing nightly test framework for Westermo software that runs on large-scale data communication systems. In experimental evaluation of the tool, we found significant improvement in regression testing results. The re-ordered test suites finish within the available time, the majority of fault-detecting test cases are located in the first third of the suite, no important test case is omitted, and the necessity for manual work on the suites is greatly reduced. © 2016 IEEE.",2016 IEEE 27th International Symposium on Software Reliability Engineering (ISSRE),IEEE,Query,10.1109/ISSRE.2016.23,2016-12-08,,,,,,Orchestration technique,Prioritization,X,,,,,,TRUE,TRUE,Embedded systems running Westermo's operating system  (unknown scale),Westermo Research and Development (Sweden),TRUE,FALSE,FALSE,TRUE,,TRUE,,"History-based, change-based",Testing time; fault detection rate,Different kinds of suites and prioritizers; apply approach to minimization,,"Per Erik Strandberg
Daniel Sundmark","No, the tool is not completely proprietary but it was tightly integrated with company-specific parts.","Yes, currently in use at Westermo, although the tool was considerably modified since the paper publication.","Yes, but further metrics could be useful, like diversity. Currently being studied.",
2016,"Marijan, Dusica; Liaaen, Marius",Effect of time window on the performance of continuous regression testing,marijan_effect_2016,"Test prioritization is an effective technique used to reduce the amount of work required to support regression testing in continuous integration development. It aims at finding an optimal order of tests that can detect regressions faster, potentially increasing the frequency of software releases. Prioritization techniques based on test execution history use the results of preceding executions to determine an optimal order of regression tests in the succeeding test executions. In this paper, we investigate how can execution history be optimally used to increase the effectiveness of regression test prioritization. We analyze the effect of history time window on the fault detection effectiveness of prioritized regression tests. We report an experimental study using a data set from Cisco. The results suggest that varying the size of the window can considerably change the performance of regression testing. Our findings will potentially help developers and test teams in adjusting test prioritization techniques for achieving higher cost-effectiveness in continuous regression testing.",2016 IEEE International Conference on Software Maintenance and Evolution (ICSME),IEEE,backward,10.1109/ICSME.2016.77,2017-01-16,,,,"This is not introducing a new TCP approach, rather evaluating the importance of the time window for a history-based TCP solution.",,,,X,,,,,,TRUE,TRUE,Cisco videoconferencing system (460 TCs),Cisco (Norway),TRUE,FALSE,FALSE,FALSE,,TRUE,,"History-based, fault detection-based","fault detection capability, APFD","Utilize comprehensive cost-benefit measures, experiments in other industry domains",,Dusica Marijan,Proprietary,"It was implemented at the time, but requires updates to remain relevant.",Yes,Contact OK
2017,"Blondeau, Vincent; Etien, Anne; Anquetil, Nicolas; Cresson, Sylvain; Croisy, Pascal; Ducasse, Stéphane",Test case selection in industry: an analysis of issues related to static approaches,blondeau_test_2017,"Automatic testing constitutes an important part of everyday development practice. Worldline, a major IT company, is creating more and more tests to ensure the good behavior of its applications and gains in efficiency and quality. But running all these tests may take hours. This is especially true for large systems involving, for example, the deployment of a web server or communication with a database. For this reason, tests are not launched as often as they should be and are mostly run at night. The company wishes to improve its development and testing process by giving to developers rapid feedback after a change. An interesting solution is to reduce the number of tests to run by identifying only those exercising the piece of code changed. Two main approaches are proposed in the literature: static and dynamic. The static approach creates a model of the source code and explores it to find links between changed methods and tests. The dynamic approach records invocations of methods during the execution of test scenarios. Before deploying a test case selection solution, Worldline created a partnership with us to investigate the situation in its projects and to evaluate these approaches on three industrial, closed source, cases to understand the strengths and weaknesses of each solution. We propose a classification of problems that may arise when trying to identify the tests that cover a method. We give concrete examples of these problems and list some possible solutions. We also evaluate other issues such as the impact on the results of the frequency of modification of methods or considering groups of methods instead of single ones. We found that solutions must be combined to obtain better results, and problems have different impacts on projects. Considering commits instead of individual methods tends to worsen the results, perhaps due to their large size.",Software Quality Journal,Springer,Query,10.1007/s11219-016-9328-4,2016-07-08,,,,"Collaboration between Worldline and a French research institution. Their focus is not on introducing new approaches, but to evaluate the existing challenges of Worldline, validate how some existing approaches can improve an existing development workflow, and understand the pros and cons of each approach.",,Case study,,,X,,,Financial software,,TRUE,TRUE,Three undisclosed Worldline projects (5000+ TCs),Worldline (France),TRUE,FALSE,FALSE,FALSE,,TRUE,,Dynamic vs. static selection,"Selection ratio, precision, recall, F-measure",Experiment with hybrid static-dynamic approach; perform further experiments implementing the approach at Worldline.,,Vincent Blondeau,Tool is outdated and requires a complex setup.,"There was an attempt with Worldline, although it seems like it was not widely adopted by the developers.",Yes,Contact OK
2017,"Ramler, Rudolf; Salomon, Christian; Buchgeher, Georg; Lusser, Michael",Tool support for change-based regression testing: An industry experience report,ramler_tool_2017,"Changes may cause unexpected side effects and inconsistencies. Regression testing is the process of re-testing a software system after changes have been made to ensure that the new version of the system has retained the capabilities of the old version and that no new defects have been introduced. Regression testing is an essential activity, but it is also time-consuming and costly. Thus, regression testing should concentrate on those parts of the system that have been modified or which are affected by changes. Regression test selection has been proposed over three decades ago and, since then, it has been frequently in the focus of empirical studies. However, regression test selection is still not widely adopted in practice. Together with the test team of an industrial software company we have developed a tool-based approach that assists software testers in selecting regression test cases based on change information and test coverage data. This paper describes the main usage scenario of the approach, illustrates the implemented solution, and reports on its evaluation in a large industry project. The evaluation showed that the tool support reduces the time required for compiling regression test suites and fosters an accurate selection of regression test cases. The paper concludes with our lessons learned from implementing the tool support in a real-world setting. © Springer International Publishing AG 2017.",SWQD 2017: Software Quality. Complexity and Challenges of Software Engineering in Emerging Technologies,Springer,Query,10.1007/978-3-319-49421-0_10,2016-11-12,,,,TCS tool developed in cooperation with an Austrian company.,,Case study,Selection,,X,,,,,TRUE,TRUE,Undisclosed software system at Omicron (over 5000 TCs),OMICRON Electronics GmbH (Austria),TRUE,TRUE,FALSE,TRUE,,TRUE,,"change-based, coverage-based, graph walk",testing time,lack of details provided by version control; redundant test cases; polluted coverage footprints; creating and maintaining coverage,,"Rudolf Ramler
Georg Buchgeher",Proprietary,"Yes, for two years. Currently not in use after changes in the team.","Yes, based on code coverage. Required effort to stay updated.",Contact OK
2017,"Gotlieb, Arnaud; Marijan, Dusica",Using global constraints to automate regression testing,gotlieb_using_2017,"Communicating or autonomous systems rely on high-quality software-based components. that must be thoroughly verified before they are released and deployed in operational settings. Regression testing is a crucial verification process that compares any new release of a software-based component against its previous versions, by executing available test cases. However, limited testing time makes selection of test cases in regression testing challenging, and some selection criteria must be respected. Validation engineers usually address this problem, coined as test suite reduction (TSR), through manual analysis or by using approximation techniques. In this paper, we address the TSR problem with sound artificial intelligence techniques such as constraint programming (CP) and global constraints. By using distinct cost-value-aggregating criteria, we propose several constraint-optimization models to find a subset of test cases that cover all the test requirements and optimize the overall cost of selected test cases. Our contribution includes reuse of existing preprocessing rules to simplify the problem before solving it and the design of structure-aware heuristics that take into account the notion of the costs associated with test cases. The work presented in this paper has been motivated by an industrial application in the communication domain. Our overall goal is to develop a constraint-based approach of test suite reduction that can be deployed to test a complete product line of conferencing systems in continuous delivery mode. By implementing this approach in a software prototype tool and experimentally evaluating it on both randomly generated and industrial instances, we hope to foster a quick adoption of the technology. Copyright © 2017, Association for the Advancement of Artificial Intelligence. All rights reserved.","

AI Magazine",AAAI,Query,10.1609/aimag.v38i1.2714,2017-03-31,,X,,,,Orchestration technique,,,,X,,"Communication industry, high-configurable systems (but not specifically problems for PL)",,TRUE,TRUE,Cisco videoconferencing system (377 TCs),Cisco (Norway),FALSE,TRUE,FALSE,MAYBE,,TRUE,,Optimized approach to Constraint-based test suite reduction and its evalutation in comparison with SOTA,"CPU time of solving
Test suite size reduction","- improve preprocessing  heuristics for improving efficiency
- increase usability to facilitate industrial adoption",,,,,,
2017,"Chi, Zongzheng; Xuan, Jifeng; Ren, Zhilei; Xie, Xiaoyuan; Guo, He",Multi-Level Random Walk for Software Test Suite Reduction,chi_multi-level_2017,"Which test cases should be selected to save the time of software testing? Due to the large time cost of running all test cases, it is necessary to run representative test cases to shorten the software development cycle. Test suite reduction, an NP-hard problem in software engineering, aims to select a subset of test cases to reduce the time cost of test execution in satisfying test requirements. Recently, search based software engineering provides a new direction to test suite reduction by connecting software engineering problems with computational intelligence methods. In this paper, we propose a multi-level optimization algorithm to simplify the original problem instance of test suite reduction. In each level, we search for local optimal solutions with random walk in potential subsets of the test suite. The problem scale is reduced by locking the intersection of local optima and by discarding shielded test cases with no contribution to test requirements. We compare our algorithm with state-of-the-art methods on test suites of ten large-scale open source projects. Experiments show that our algorithm can more efficiently find optima on five out of six projects, in which Integer Linear Programming (ILP) can find optima; for the other four projects that ILP fails to solve, our algorithm provides the best solutions among heuristics in comparison. © 2017 IEEE.",IEEE Computational Intelligence Magazine,IEEE,query refresh,10.1109/MCI.2017.2670460,2017-04-12,,,,,,,,,,X,,,,TRUE,TRUE,Open-source Java projects (up to 6196 TCs),,FALSE,FALSE,FALSE,FALSE,http://cstar.whu.edu.cn/p/multi-walk/,TRUE,,search-based,"reduction rate, runtime",,,,,,,
2017,"Strandberg, Per Erik; Afzal, Wasif; Ostrand, Thomas J.; Weyuker, Elaine J.; Sundmark, Daniel",Automated system-level regression test prioritization in a nutshell,erik_strandberg_automated_2017,"Westermo Research and Development has developed SuiteBuilder, an 
automated tool to determine an effective ordering of regression test 
cases. The ordering is based on factors such as fault detection success,
 the interval since the last execution, and code modifications. 
SuiteBuilder has enabled Westermo to overcome numerous 
regression-testing problems, including lack of time to run a complete 
regression suite, failure to detect bugs in a timely manner, and 
repeatedly omitted tests. In the tool's first two years of use, 
reordered test suites finished in the available time, most 
fault-detecting test cases were located in the first third of suites, no
 important test case was omitted, and the necessity for manual work on 
the suites decreased greatly.",IEEE Software,IEEE,backward,10.1109/MS.2017.92,2017-07-11,,X,,"This is a magazine version of strandberg_experience_2016, providing an easier-to-digest version of the research.",,Experience report,,x,,,,Large scale communication system,,TRUE,TRUE,,,TRUE,FALSE,FALSE,TRUE,,MAYBE,,coarse-grained weighted TCP based on history and est. test execution time (to stay within night),normalized failure distribution,"- consider test topic
- assign weights automatically",,"Per Erik Strandberg
Daniel Sundmark","No, the tool is not completely proprietary but it was tightly integrated with company-specific parts.","Yes, currently in use at Westermo, although the tool was considerably modified since the paper publication.","Yes, but further metrics could be useful, like diversity. Currently being studied.",Contact OK
2017,"Bach, Thomas; Andrzejak, Artur; Pannemans, Ralf",Coverage-Based Reduction of Test Execution Time: Lessons from a Very Large Industrial Project,bach_coverage-based_2017,"There exist several coverage-based approaches to reduce time and resource costs of test execution. While these methods are well-investigated and evaluated for smaller to medium-size projects, we faced several challenges in applying them in the context of a very large industrial software project, namely SAP HANA. These issues include: varying effectiveness of algorithms for test case selection/prioritization, large amounts of shared (non-specific) coverage between different tests, high redundancy of coverage data, and randomness of test results (i.e. flaky tests), as well as of the coverage data (e.g. due to concurrency issues). We address these issues by several approaches. First, our study shows that compared to standard algorithms, so-called overlap-aware solvers can achieve up to 50% higher code coverage in a fixed time budget, significantly increasing the effectiveness of test case prioritization and selection. We also detected in our project high redundancy of line coverage data (up to 97%), providing opportunities for data size reduction. Finally, we show that removal of coverage shared by tests can significantly increase test specificity. Our analysis and approaches can help to narrow the gap between research and practice in context of coverage-based testing approaches, especially in case of very large software projects. © 2017 IEEE.","2017 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)",IEEE,Query,10.1109/ICSTW.2017.6,2017-04-17,,,,"This paper has a few interesting contributions:

First, it highlights the importance of ""overlap awareness"" when discussing coverage-based solutions for TCS and TCP.

Second, it explicitly states some challenges that are a result of the gap between research and practice: algorithms for reducing testing time, reliability of test results, specificity of coverage data, coverage data size and quality.

Third, it claims to handle both TCS and TCP, although the same overlap-aware coverage-based algorithm is used for both.",,"Case study, orchestration technique",,X,X,,,Database management system,,TRUE,TRUE ,Database management system (19472 TCs),SAP SE (Germany),TRUE,TRUE ,FALSE,TRUE,,TRUE,,"Greedy (algo)

Coverage-based and overlap-aware (info)",Coverage,"Flaky tests, experiment with other over-lap aware heuristics.",,Thomas Bach,N/A,"At a conceptual level, yes.","Yes, the metrics influenced decisions of the industrial partner.",
2017,"Vasic, Marko; Parvez, Zuhair; Milicevic, Aleksandar; Gligoric, Milos",File-Level vs. Module-Level Regression Test Selection for .NET,vasic_file-level_2017,"Regression testing is used to check the correctness of evolving software. With the adoption of Agile development methodology, the number of tests and software revisions has dramatically increased, and hence has the cost of regression testing. Researchers proposed regression test selection (RTS) techniques that optimize regression testing by skipping tests that are not impacted by recent program changes. Ekstazi is one such state-of-the art technique; Ekstazi is implemented for the Java programming language and has been adopted by several companies and open-source projects.
We report on our experience implementing and evaluating Ekstazi#, an Ekstazi-like tool for .NET. We describe the key challenges of bringing the Ekstazi idea to the .NET platform. We evaluate Ekstazi# on 11 open-source projects, as well as an internal Microsoft project substantially larger than each of the open-source projects. Finally, we compare Ekstazi# to an incremental build system (also developed at Microsoft), which, out of the box, provides module-level dependency tracking and skipping tasks (including test execution) whenever dependencies of a task do not change between the current and the last successful build. Ekstazi# on average reduced regression testing time by 43.70% for the open-source projects and by 65.26% for the Microsoft project (the latter is in addition to the savings provided by incremental builds).",ESEC/FSE 2017: Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering,ACM,backward,10.1145/3106237.3117763,2017-08-21,,,,"An adaptation of Ekstazi for C# and .NET. Doesn't seem to provide much new conceptually, aside from the notion of utilizing the same approach with a different programming language while maintaining good results.

Experimented with 11 GitHub projects and one unnamed Microsoft project.",,,,,X,,,C#/.NET variant,,TRUE,TRUE,Open-source C# projects (up to 138 TCs) plus one Microsoft project (37 TCs),Microsoft (USA),TRUE,FALSE,FALSE,FALSE,https://github.com/marko-vasic/ekstaziSharp,TRUE,,Change-based,"selection count, execution time, cumulative time",n/a,,Marko Vasic,https://github.com/marko-vasic/ekstaziSharp,"It was evaluated with Microsoft, but author thinks it is not currently in use.",N/A,
2017,"Magalhães, Claudio; Andrade, João; Perrusi, Lucas; Mota, Alexandre",Evaluating an Automatic Text-Based Test Case Selection Using a Non-Instrumented Code Coverage Analysis,magalhaes_evaluating_2017,"During development, systems may be tested several times. In general, a system evolves from change requests, aiming at improving its behavior in terms of new features as well as fixing failures. Thus, selecting the best test plan in terms of the closeness between test cases and the changed code and its dependencies is pursued by industry and academia. In this paper we measure the coverage achieved by an automatic test case selection based on information retrieval that relates change requests and test cases. But instead of using off-the-shelf coverage tools, like JaCoCo, we propose a way of obtaining code coverage of Android apk's without instrumentation. This was a basic requirement of our industrial partner. We performed some experiments on this industrial partner and promising results were obtained.",SAST: Proceedings of the 2nd Brazilian Symposium on Systematic and Automated Software Testing,ACM,Query,10.1145/3128473.3128478,2017-09-18,,,,"Their approach is based on change requests (CRs), but also requires a Master Plan (MP) describing testing goals, which, from my understanding, needs to be manually designed.

The paper briefly touches on the concepts of orchestration (referred to as test planning), although the proposed tool only does TCS.

This seems like a somewhat minor extension of magalhaes_automatic_2016.",,Orchestration technique,,,X,,,Mobile (Android),,TRUE,"TRUE 
(Motorola)",,,FALSE,"FALSE 
(not stated, but it is implied due to the collaboration)",FALSE,TRUE,,MAYBE,,"Change-based, requirements-based",Coverage; selection count; failures detected,Compare automated selection with manual selection; how to improve available tests; find relationship between code changes and text representations of test cases.,,Claudio Magalhães,Proprietary,"Yes, the tool is currently in use at Motorola in Brazil.","Yes. Further metrics are in a follow-up paper, and ""time spent"" was also evaluated.",Contact OK
2017,"Celik, Ahmet; Vasic, Marko; Milicevic, Aleksandar; Gligoric, Milos",Regression test selection across JVM boundaries,celik_regression_2017,"Modern software development processes recommend that changes be integrated into the main development line of a project multiple times a day. Before a new revision may be integrated, developers practice regression testing to ensure that the latest changes do not break any previously established functionality. The cost of regression testing is high, due to an increase in the number of revisions that are introduced per day, as well as the number of tests developers write per revision. Regression test selection (RTS) optimizes regression testing by skipping tests that are not affected by recent project changes. Existing dynamic RTS techniques support only projects written in a single programming language, which is unfortunate knowing that an open-source project is on average written in several programming languages. We present the first dynamic RTS technique that does not stop at predefined language boundaries. Our technique dynamically detects, at the operating system level, all file artifacts a test depends on. Our technique is, hence, oblivious to the specific means the test uses to actually access the files: be it through spawning a new process, invoking a system call, invoking a library written in a different language, invoking a library that spawns a process which makes a system call, etc. We also provide a set of extension points which allow for a smooth integration with testing frameworks and build systems. We implemented our technique in a tool called RTSLinux as a loadable Linux kernel module and evaluated it on 21 Java projects that escape the JVM by spawning new processes or invoking native code, totaling 2, 050, 791 lines of code. Our results show that RTSLinux, on average, skips 74.17% of tests and saves 52.83% of test execution time compared to executing all tests. © 2017 Association for Computing Machinery.",ESEC/FSE 2017: Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering,ACM,Query,10.1145/3106237.3106297,2017-08-21,,,,,,Orchestration technique/Context-specific,Selection,,X,,,Multi-language projects,,TRUE,FALSE,Open-source Java projects (up to 431 TCs),Microsoft (USA),TRUE,FALSE,FALSE,FALSE,,TRUE,,Change-based,"testing time, reduction rate, dependency discovery, overhead",Incorporate approach with other programming languages.,,Ahmet Celik,Not currently available due to incompatibilities with the Linux kernel.,Previously usable on Linux,N/A,Contact OK
2017,"Kwon, Jung-Hyun; Ko, In-Young",Cost-effective regression testing using bloom filters in continuous integration development environments,kwon_cost-effective_2017,"Regression testing in continuous integration development environments 
must be cost-effective and should provide fast feedback on test suite 
failures to the developers. In order to provide faster feedback on 
failures to developers while using computing resources efficiently, two 
types of regression testing techniques have been developed: Regression 
Testing Selection (RTS) and Test Case Prioritization (TCP). One of the 
factors that reduces the effectiveness of the RTS and TCP techniques is 
the inclusion of test suites that fail only once over a period. We 
propose an approach based on Bloom filtering to exclude such test suites
 during the RTS process, and to assign such test suites with a lower 
priority during the TCP process. We experimentally evaluate our approach
 using a Google dataset, and demonstrate that cost-effectiveness of the 
proposed RTS and TCP techniques outperforms the state-of-the-art 
techniques.",2017 24th Asia-Pacific Software Engineering Conference (APSEC),IEEE,backward,10.1109/APSEC.2017.22,2018-03-05,,,X,,,Technique analysis,,X,X,,,Selection and prioritization of Test Suites to be executed in a CI environment. The proposed approach is inspired by the work from Elbaum and Penix on Google (Google CI dataset).,,TRUE,TRUE,"""The Google dataset of testing results"" from Elbaum and Penix",,FALSE,FALSE,FALSE,FALSE,,TRUE,,A bloom ﬁlter is used together with the window-based method proposed by Elbaum and Penix with the purpose of removing test suites that failed only once over a period. The selected test suites receive a weight that is later used for prioritizing the TS execution (so some notion of orchestration could possibly be considered).,"Fault detection capability, Efftime (efficiency), and Precision.",Improve the approach to reduce the false-positive cases.,,,,,,
2018,"Ouriques, João Felipe S.; Cartaxo, Emanuela G.; Machado, Patrícia D.L.",Test case prioritization techniques for model-based testing: a replicated study,ouriques_test_2018,"Recently, several test case prioritization (TCP) techniques have been proposed to order test cases for achieving a goal during test execution, particularly, revealing faults sooner. In the model-based testing (MBT) context, such techniques are usually based on heuristics related to structural elements of the model and derived test cases. In this sense, techniques' performance may vary due to a number of factors. While empirical studies comparing the performance of TCP techniques have already been presented in literature, there is still little knowledge, particularly in the MBT context, about which factors may influence the outcomes suggested by a TCP technique. In a previous family of empirical studies focusing on labeled transition systems, we identified that the model layout, i.e., amount of branches, joins, and loops in the model, alone may have little influence on the effectiveness of TCP techniques investigated, whereas characteristics of test cases that actually fail definitely influences this aspect. However, we considered only synthetic artifacts in the study, which reduced the ability of representing properly the reality. In this paper, we present a replication of one of these studies, now with a larger and more representative selection of techniques and considering test suites from industrial systems as experimental objects. Our objective is to find out whether the results remain while increasing the validity in comparison to the original study. Results reinforce that there is no best performer among the investigated techniques and characteristics of test cases that fail represent an important factor, although adaptive random-based techniques are less affected by it.",Software Quality Journal,IEEE,Query,10.1007/s11219-017-9398-y,2018-01-23,,,,This is a replication of a study by the same authors (in 2015); in the original paper they evaluated a technique with experimental data and this time propose to use an industrial example.,,Orchestration technique,,X,,,,,,TRUE,TRUE,Undisclosed systems at Ingenico (up to 48 TCs),Ingenico (Brazil),FALSE,FALSE,FALSE,FALSE,,TRUE,,"coverage-based, similarity-based, path complexity-based, model-based",APFD,discover influence of other factors on effectiveness; collect supplementary data to improve techniques.,,Patícia Machado,N/A,N/A,N/A,Contact OK
2018,"Garousi, Vahid; Özkan, Ramazan; Betin-Can, Aysu",Multi-objective regression test selection in practice: An empirical study in the defense software industry,garousi_multi-objective_2018,"Context: Executing an entire regression test-suite after every code change is often costly in large software projects. To cope with this challenge, researchers have proposed various regression test-selection techniques. Objective: This paper was motivated by a real industrial need to improve regression-testing practices in the context of a safety-critical industrial software in the defence domain in Turkey. To address our objective, we set up and conducted an “action-research” collaborative project between industry and academia. Method: After a careful literature review, we selected a conceptual multi-objective regression-test selection framework (called MORTO) and adopted it to our industrial context by developing a custom-built genetic algorithm (GA) based on that conceptual framework. GA is able to provide full coverage of the affected (changed) requirements while considering multiple cost and benefit factors of regression testing. e.g., minimizing the number of test cases, and maximizing cumulative number of detected faults by each test suite. Results: The empirical results of applying the approach on the Software Under Test (SUT) demonstrate that this approach yields a more efficient test suite (in terms of costs and benefits) compared to the old (manual) test-selection approach, used in the company, and another applicable approach chosen from the literature. With this new approach, regression selection process in the project under study is not ad-hoc anymore. Furthermore, we have been able to eliminate the subjectivity of regression testing and its dependency on expert opinions. Conclusion: Since the proposed approach has been beneficial in saving the costs of regression testing, it is currently in active use in the company. We believe that other practitioners can apply our approach in their regression-testing contexts too, when applicable. Furthermore, this paper contributes to the body of evidence in regression testing by offering a success story of successful implementation and application of multi-objective regression testing in practice. © 2018",Information and Software Technology,Elsevier,Query,10.1016/j.infsof.2018.06.007,2018-06-30,,,,,,Orchestration technique,Selection,,X,,,Defense software,,TRUE (Turkish defense?),TRUE,Defense software system (up to 3588 TCs),Government organization (Turkey),FALSE,FALSE,TRUE,TRUE,https://zenodo.org/record/1149058#.Xto4gfKxVTY,TRUE,,multi-objective genetic algorithm,"Test execution time, third-party costs, system setup costs, technical resources cost, verification cost",,,Ramazan Özkan,Confidential military software.,Unknown,N/A,
2018,"Shi, August; Gyori, Alex; Mahmood, Suleman; Zhao, Peiyuan; Marinov, Darko",Evaluating test-suite reduction in real software evolution,shi_evaluating_2018,"Test-suite reduction (TSR) speeds up regression testing by removing redundant tests from the test suite, thus running fewer tests in the future builds. To decide whether to use TSR or not, a developer needs some way to predict how well the reduced test suite will detect real faults in the future compared to the original test suite. Prior research evaluated the cost of TSR using only program versions with seeded faults, but such evaluations do not explicitly predict the effectiveness of the reduced test suite in future builds.

We perform the first extensive study of TSR using real test failures in (failed) builds that occurred for real code changes. We analyze 1478 failed builds from 32 GitHub projects that run their tests on Travis. Each failed build can have multiple faults, so we propose a family of mappings from test failures to faults. We use these mappings to compute Failed-Build Detection Loss (FBDL), the percentage of failed builds where the reduced test suite misses to detect all the faults detected by the original test suite. We find that FBDL can be up to 52.2%, which is higher than suggested by traditional TSR metrics. Moreover, traditional TSR metrics are not good predictors of FBDL, making it difficult for developers to decide whether to use reduced test suites.",ISSTA 2018: Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis,ACM,author suggestion,10.1145/3213846.3213875,2018-07-12,,,,,,,,,,X,,,,TRUE,FALSE,Open-source programs (up to 770 TCs),,FALSE,FALSE,FALSE,FALSE,,TRUE,,coverage-based,FBDL (failed build detection loss),,,Darko Marinov,N/A,N/A,"The objective here was not to develop a tool for industry, rather to point out and understand the problems related to implementing TCR in practice.",
2018,"Haghighatkhah, Alireza; Mäntylä,  Mika; Oivo, Markku; Kuvaja, Pasi",Test prioritization in continuous integration environments,haghighatkhah_test_2018,"Two heuristics namely diversity-based (DBTP) and history-based test prioritization (HBTP) have been separately proposed in the literature. Yet, their combination has not been widely studied in continuous integration (CI) environments. The objective of this study is to catch regression faults earlier, allowing developers to integrate and verify their changes more frequently and continuously. To achieve this, we investigated six open-source projects, each of which included several builds over a large time period. Findings indicate that previous failure knowledge seems to have strong predictive power in CI environments and can be used to effectively prioritize tests. HBTP does not necessarily need to have large data, and its effectiveness improves to a certain degree with larger history interval. DBTP can be used effectively during the early stages, when no historical data is available, and also combined with HBTP to improve its effectiveness. Among the investigated techniques, we found that history-based diversity using NCD Multiset is superior in terms of effectiveness but comes with relatively higher overhead in terms of method execution time. Test prioritization in CI environments can be effectively performed with negligible investment using previous failure knowledge, and its effectiveness can be further improved by considering dissimilarities among the tests.",Journal of Systems and Software,Elsevier,backward,10.1016/j.jss.2018.08.061,2018-08-31,,,X,,,,,X,,,,,,TRUE,FALSE,Open-source Java projects (up to 411 TCs),,FALSE,FALSE,FALSE,FALSE,,TRUE,,combination of diversity-based and history-based,"APFD, execution time",,,,,,,
2018,"Yilmaz, Uğur; Tarhan, Ayça",A case study to compare regression test selection techniques on open-source software projects,yilmaz_case_2018,"Regression testing is the type of testing performed on a modified software to validate integrated parts are functioning properly. Especially with agile development practices being increasingly used, regression testing needs to be fast and practical enough to coexist with the nature of agile development. To satisfy this need, Regression Test Selection (RTS) techniques are proposed to reduce number of tests. Although there are many studies analyzing these techniques and their effectiveness in terms of the number of reduced tests, time and cost; the applicability and practicality aspects have been mostly neglected. To this end, in this paper a case study is carried out to compare highly cited and mostly used RTS techniques. Selected techniques are applied on extensively used and tested open-source software projects, and the result of their comparison in regards of practicality, applicability, performance and cost-effectiveness are discussed.",Proceedings of the 12th Turkish National Software Engineering Symposium ,CEUR,Query,http://ceur-ws.org/Vol-2201/UYMS_YTM_2018_paper_87.pdf,2018-09-10,,,,"This compares Ekstazi, STARTS and RETEST based on their availability, documentation, functionality and overall practicality. It's a little bit shallow, but a nice comparison to see anyway.",,Technique analysis,Selection,,X,,,,,FALSE,FALSE,Open-source Java projects (up to 361),,FALSE,FALSE,n/a,n/a,,MAYBE,,Comparison of change-based and graph-based techniques,"testing time, selection rate",,,,,,,
2018,Lingming Zhang,Hybrid regression test selection,zhang_hybrid_2018,"Regression testing is crucial but can be extremely costly. Regression Test Selection (RTS) aims to reduce regression testing cost by only selecting and running the tests that may be affected by code changes. To date, various RTS techniques analyzing at different granularities (e.g., at the basic-block, method, and file levels) have been proposed. RTS techniques working on finer granularities may be more precise in selecting tests, while techniques working on coarser granularities may have lower overhead. According to a recent study, RTS at the file level (FRTS) can have less overall testing time compared with a finer grained technique at the method level, and represents state-of-the-art RTS. In this paper, we present the first hybrid RTS approach, HyRTS, that analyzes at multiple granularities to combine the strengths of traditional RTS techniques at different granularities. We implemented the basic HyRTS technique by combining the method and file granularity RTS. The experimental results on 2707 revisions of 32 projects, totalling over 124 Million LoC, demonstrate that HyRTS outperforms state-of-the-art FRTS significantly in terms of selected test ratio and the offline testing time. We also studied the impacts of each type of method-level changes, and further designed two new HyRTS variants based on the study results. Our additional experiments show that transforming instance method additions/deletions into file-level changes produces an even more effective HyRTS variant that can significantly outperform FRTS in both offline and online testing time.",ICSE '18: Proceedings of the 40th International Conference on Software Engineering,ACM,backward,10.1145/3180155.3180198,2018-09-03,,X,,,,Orchestration technique,,,X,,,Large scale Java (as Ekstazi),,TRUE,FALSE,Open-source Java projects (up to 16069 TCs),,FALSE,FALSE,TRUE,FALSE,http://hyrts.org/,TRUE,,"A dynamic approach to TCS that combines file-level (like Ekstazi) with method level selection, under different variations, to improve precision while keeping efficiency","- Selected test ratio

- E2E testing time ",Apply the idea of hybris also to static RTS techniques,,,,,,
2018,"Miranda, Breno; Cruciani, Emilio; Verdecchia, Roberto; Bertolino, Antonia",FAST Approaches to Scalable Similarity-Based Test Case Prioritization,miranda_fast_2018,"Many test case prioritization criteria have been proposed for speeding up fault detection. Among them, similarity-based approaches give priority to the test cases that are the most dissimilar from those already selected. However, the proposed criteria do not scale up to handle the many thousands or even some millions test suite sizes of modern industrial systems and simple heuristics are used instead. We introduce the FAST family of test case prioritization techniques that radically changes this landscape by borrowing algorithms commonly exploited in the big data domain to find similar items. FAST techniques provide scalable similarity-based test case prioritization in both white-box and black-box fashion. The results from experimentation on real world C and Java subjects show that the fastest members of the family outperform other black-box approaches in e ciency with no significant impact on e ectiveness, and also outperform white-box approaches, including greedy ones, if preparation time is not counted. A simulation study of scalability shows that one FAST technique can prioritize a million test cases in less than 20 minutes.",2018 IEEE/ACM 40th International Conference on Software Engineering (ICSE),ACM,Query,10.1145/3180155.3180210,2018-09-03,,,,"Both FAST papers are in the more academic side of the spectrum, however they are greatly concerned with efficiency and scalability.",,Orchestration technique,Prioritization,X,,,,,,TRUE,FALSE,Open-source C and Java projects (up to 670 TCs) + synthetic data for scalability measure,,FALSE,FALSE,TRUE,FALSE,https://github.com/icse18-fast/FAST,TRUE,,similarity-based,"Prioritization time, total testing time, scalability",,,"Emilio Cruciani
Roberto Verdecchia",https://github.com/icse18-FAST/FAST,No,N/A,Contact OK
2018,"Chen, Junjie; Lou, Yiling; Zhang, Lingming Lu; Zhou, Jianyi; Wang, Xiaoleng; Hao, Dan; Zhang, Lingming Lu",Optimizing Test Prioritization via Test Distribution Analysis,chen_optimizing_2018,"Test prioritization aims to detect regression faults faster via reordering test executions, and a large number of test prioritization techniques have been proposed accordingly. However, test prioritization effectiveness is usually measured in terms of the average percentage of faults detected concerned with the number of test executions, rather than the actual regression testing time, making it unclear which technique is optimal in actual regression testing time. To answer this question, this paper first conducts an empirical study to investigate the actual regression testing time of various prioritization techniques. The results reveal a number of practical guidelines. In particular, no prioritization technique can always perform optimal in practice. To achieve the optimal prioritization effectiveness for any given project in practice, based on the findings of this study, we design learning-based Predictive Test Prioritization (PTP). PTP predicts the optimal prioritization technique for a given project based on the test distribution analysis (i.e., the distribution of test coverage, testing time, and coverage per unit time). The results show that PTP correctly predicts the optimal prioritization technique for 46 out of 50 open-source projects from GitHub, outperforming stateof- the-art techniques significantly in regression testing time, e.g., 43.16% to 94.92% improvement in detecting the first regression fault. Furthermore, PTP has been successfully integrated into the practical testing infrastructure of Baidu (a search service provider with over 600M monthly active users), and received positive feedbacks fromthe testing team of this company, e.g., saving beyond 2X testing costs with negligible overheads.",ESEC/FSE 2018: Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering,ACM,Query,10.1145/3236024.3236053,2018-10-26,,,,The idea is to have a meta-tool to predict which TCP approach makes more sense in a given situation. ,,Technique analysis,Prioritization,X,,,,General,,TRUE,TRUE,Open-source Java projects (up to 9691 TCs) plus undisclosed projects from Baidu (up to 4139 TCs),Baidu (China),FALSE,FALSE,TRUE,TRUE,https://github.com/JunjieChen/PTP,TRUE,,Analyzes test coverage to predict the optimal TCP technique for a given project.,"APFDc, FT, LT, AT",,,,,,,
2018,"Celik, Ahmet; Lee, Young Chul; Gligoric, Milos",Regression Test Selection for TizenRT,celik_regression_2018,"Regression testing - running tests after code modifications - is widely practiced in industry, including at Samsung. Regression Test Selection (RTS) optimizes regression testing by skipping tests that are not affected by recent code changes. Recent work has developed robust RTS tools, which mostly target managed languages, e.g., Java and C#, and thus are not applicable to large C projects, e.g., TizenRT, a lightweight RTOS-based platform. We present Selfection, an RTS tool for projects written in C; we discuss the key challenges to develop Selfection and our design decisions. Selfection uses the objdump and readelf tools to statically build a dependency graph of functions from binaries and detect modified code elements. We integrated Selfection in TizenRT and evaluated its benefits if tests are run in an emulator and on a supported hardware platform (ARTIK 053). We used the latest 150 revisions of TizenRT available on GitHub. We measured the benefits of Selfection as the reduction in the number of tests and reduction in test execution time over running all tests at each revision (i.e., RetestAll). Our results show that Selfection can reduce, on average, the number of tests to 4.95% and end-to-end execution time to 7.04% when tests are executed in the emulator, and to 5.74% and 26.82% when tests are executed on the actual hardware. Our results also show that the time taken to maintain the dependency graph and detect modified functions is negligible.",ESEC/FSE 2018: Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering,ACM,Query,10.1145/3236024.3275527,2018-10-26,,,,,,Orchestration technique/Context-specific,Selection,,X,,,general (C),,TRUE,TRUE,TizenRT (877 TCs),Samsung (South Korea),TRUE,FALSE,TRUE,MAYBE,https://github.com/ahmet-celik/Selfection,TRUE,,"Change-based, graph-based","Selection rate, testing time, build time",,,Ahmet Celik,https://github.com/ahmet-celik/Selfection,It was supported by Samsung; current status unknown,N/A,Contact OK
2018,"Zhu, Yuecai; Shihab, Emad; Rigby, Peter C.",Test re-prioritization in continuous testing environments,zhu_test_2018,"New changes are constantly and concurrently being made to large software systems. In modern continuous integration and deployment environments, each change requires a set of tests to be run. This volume of tests leads to multiple test requests being made simultaneously, which warrant prioritization of such requests. Previous work on test prioritization schedules queued tests at set time intervals. However, after a test has been scheduled it will never be reprioritized even if new higher risk tests arrive. Furthermore, as each test finishes, new information is available which could be used to reprioritize tests. In this work, we use the conditional failure probability among tests to reprioritize tests after each test run. This means that tests can be reprioritized hundreds of times as they wait to be run. Our approach is scalable because we do not depend on static analysis or coverage measures and simply prioritize tests based on their co-failure probability distributions. We named this approach CODYNAQ and in particular, we propose three prioritization variants called CODYNAQSINGLE, CODYNAQDOUBLE and CODYNAQFLEXI. We evaluate our approach on two data sets, CHROME and Google testing data. We find that our co-failure dynamic re-prioritization approach, CODYNAQ, outperforms the default order, FIFOBASELINE, finding the first failure and all failures for a change request by 31% and 62% faster, respectively. CODYNAQ also outperforms GOOGLETCP by finding the first failure 27% faster and all failures 62% faster. © 2018 IEEE.",2018 IEEE International Conference on Software Maintenance and Evolution (ICSME),IEEE,Query,10.1109/ICSME.2018.00016,2018-11-12,,,,This appears to be an academic approach trying to improve upon a previous technique proposed by Google.,,Orchestration technique,Prioritization,X,,,,Continuous integration,,TRUE,TRUE,"""The Google dataset of testing results"" from Elbaum and Penix plus data scraped from the Chromium project (up to 149 TCs per minute)",,FALSE,FALSE,FALSE,FALSE,,TRUE,,Co-failure distributions,"FirstFail, AllFail, delayed failures (goal: speed up detection of first/all failure)",,,,,,,
2018,Maral Azizi; Hyunsook Do,Retest: A cost effective test case selection technique for modern software development,azizi_retest_2018,"Regression test selection offers cost savings by selecting a subset of existing tests when testers validate the modified version of the application. The majority of test selection approaches utilize static or dynamic analyses to decide which test cases should be selected, and these analyses are often very time consuming. In this paper, we propose a novel language-independent Regression TEst SelecTion (ReTEST) technique that facilitates a lightweight analysis by using information retrieval. ReTEST uses fault history, test case diversity, and program change history information to select test cases that should be rerun. Our empirical evaluation with four open source programs shows that our approach can be effective and efficient by selecting a far smaller subset of tests compared to the existing techniques.",2018 IEEE 29th International Symposium on Software Reliability Engineering (ISSRE),IEEE,forward,10.1109/ISSRE.2018.00025,2018-11-19,,,,"Similarly to [Fu et al 2019], there is an emphasis on working with multiple programming languages.",,,,,X,,,Language-agnostic,,TRUE,TRUE,Two open-source .net and C# programs (up to 628 TCs) and two Java subjects from Defects4J (up to 393 TCs),,FALSE,FALSE,FALSE,FALSE,,TRUE,,Graph-based,"selection count, fault detection rate","automate parameter selection, apply approach on TCP and TSR.",,Hyunsook Do,N/A,No,N/A,
2019,"Guo, Bo; Kwon, Young-Woo; Song, Myoungkyu",Decomposing Composite Changes for Code Review and Regression Test Selection in Evolving Software,guo_decomposing_2019,"Inspecting and testing code changes typically require a significant amount of developer effort. As a system evolves, developers often create composite changes by mixing multiple development issues, as opposed to addressing one independent issue — an atomic change. Inspecting composite changes often becomes time-consuming and error-prone. To test unrelated edits on composite changes, rerunning all regression tests may require excessive time. To address the problem, we present an interactive technique for change decomposition to support code reviews and regression test selection, called ChgCutter. When a developer specifies code change within a diff patch, ChgCutter partitions composite changes into a set of related atomic changes, which is more cohesive and self-contained regarding the issue being addressed. For composite change inspection, it generates an intermediate program version that only includes a related change subset using program dependence relationships. For cost reduction during regression testing, it safely selects only affected tests responsible for changes to an intermediate version. In the evaluation, we apply ChgCutter to 28 composite changes in four open source projects. ChgCutter partitions these changes with 95.7% accuracy, while selecting affected tests with 89.0% accuracy. We conduct a user study with professional software engineers at PayPal and find that ChgCutter is helpful in understanding and validating composite changes, scaling to industry projects. © 2019, Springer Science+Business Media, LLC & Science Press, China.",Journal of Computer Science and Technology ,Springer,Query,10.1007/s11390-019-1917-9,2019-03-22,,,,"This approach is slightly unconventional, but very interesting. The overall quality of the presentation impressed; this paper checks all the good boxes.",,Orchestration technique,Selection,,X,,,General (Java),,TRUE,FALSE,Generated test suite based on four open-source Java projects (totaling 3456 TCs),PayPal (USA),TRUE,TRUE,TRUE,TRUE,https://sites.google.com/unomaha.edu/interactively-partitioning,TRUE,,Change-based,Precision/Recall,,,,,,,
2019,"Zhong, Hua; Zhang, Lingming; Khurshid, Sarfraz",TestSage: Regression test selection for large-scale Web service testing,zhong_testsage:_2019,"Regression testing is an important but expensive activity in software development. Among various types of tests, web service tests are usually one of the most expensive (due to network communications) but widely adopted types of tests in commercial software development. Regression test selection (RTS) aims to reduce the number of tests which need to be retested by only running tests that are affected by code changes. Although a large number of RTS techniques have been proposed in the past few decades, these techniques have not been adopted on large-scale web service testing. This is because most existing RTS techniques either require direct code dependency between tests and code under test or cannot be applied on large scale systems with enough efficiency. In this paper, we present a novel RTS technique, TestSage, that performs RTS for web service tests on large scale commercial software. With a small overhead, TestSage is able to collect fine grained (function level) dependency between test and service under test that do not directly depend on each other. TestSage has also been successfully applied to large complex systems with over a million functions. We conducted experiments of TestSage on a large scale backend service at Google. Experimental results show that TestSage reduces 34% of testing time when running all AEC (Analysis, Execution and Collection) phases, 50% of testing time while running without collection phase. TestSage has been integrated with internal testing framework at Google and runs day-to-day at the company.","2019 12th IEEE Conference on Software Testing, Validation and Verification (ICST)",IEEE,forward,10.1109/ICST.2019.00052,2019-06-06,,,X,,,Technique analysis,TCS,,X,,,TCS for Large-scale Web Service Testing,,TRUE,TRUE,Google Assistant (tens of thousands of tests),Google (USA),TRUE,TRUE,FALSE,TRUE,,TRUE,,Trace-based,"Selection ratio, testing time reduction",,,,,,,
2019,"Goyal, Amit; Shyamasundar, R. K.; Jetley, Raoul; Mohan, Devina; Ramaswamy, Srini",Test suite minimization of evolving software systems: A case study,goyal_test_2019,"Test suite minimization ensures that an optimum set of test cases are selected to provide maximum coverage of requirements. In this paper, we discuss and evaluate techniques for test suite minimization of evolving software systems. As a case study, we have used an industrial tool, Static Code Analysis (SCAN) tool for Electronic Device Description Language (EDDL) as the System Under Test (SUT). We have used standard approaches including Greedy, Greedy Essential (GE) and Greedy Redundant Essential (GRE) for minimization of the test suite for a given set of requirements of the SUT. Further, we have proposed and implemented k-coverage variants of these approaches. The minimized test suite which is obtained as a result reduces testing effort and time during regression testing. The paper also addresses the need for choosing an appropriate level of granularity of requirements to efficiently cover all requirements. The paper demonstrates how fine grained requirements help in finding an optimal test suite to completely address the requirements and also help in detecting bugs in each version of the software. Finally, the results from different analyses have been presented and compared and it has been observed that GE heuristics performs the best (run time) under certain conditions. Copyright © 2019 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved.",Proceedings of the 14th International Conference on Software Technologies - ICSOFT,SciTePress,Query,10.5220/0007842502260237,2019-07-28,,,,"Seems like this is a technique targeting an entire programming language, rather than specific projects",,Case study,,,,X,,,,TRUE,TRUE,,ABB (India/USA),TRUE,FALSE,FALSE,FALSE,,MAYBE,,requirements-based,"reduction rate, runtime",generation with similar approach; consider time of each test case.,,,,,,
2019,"Fu, Ben; Misailovic, Sasa; Gligoric, Milos",Resurgence of Regression Test Selection for C++,fu_resurgence_2019,"Regression testing - running available tests after each project change - is widely practiced in industry. Despite its widespread use and importance, regression testing is a costly activity. Regression test selection (RTS) optimizes regression testing by selecting only tests affected by project changes. RTS has been extensively studied and several tools have been deployed in large projects. However, work on RTS over the last decade has mostly focused on languages with abstract computing machines (e.g., JVM). Meanwhile development practices (e.g., frequency of commits, testing frameworks, compilers) in C++ projects have dramatically changed and the way we should design and implement RTS tools and the benefits of those tools is unknown. We present a design and implementation of an RTS technique, dubbed RTS++, that targets projects written in C++, which compile to LLVM IR and use the Google Test testing framework. RTS++ uses static analysis of a function call graph to select tests. RTS++ integrates with many existing build systems, including AutoMake, CMake, and Make. We evaluated RTS++ on 11 large open-source projects, totaling 3,811,916 lines of code. To the best of our knowledge, this is the largest evaluation of an RTS technique for C++. We measured the benefits of RTS++ compared to running all available tests (i.e., retest-all). Our results show that RTS++ reduces the number of executed tests and end-to-end testing time by 88% and 61% on average.","2019 12th IEEE Conference on Software Testing, Validation and Verification (ICST)",IEEE,forward,10.1109/ICST.2019.00039,2019-06-06,,,,"I think this follows well an argument made in our tertiary study, about applying techniques into different domains of software.",,Orchestration technique,,,X,,,C++,,TRUE,FALSE,Open-source C++ projects (up to 673 TCs),,FALSE,FALSE,FALSE,FALSE,,TRUE,,Change-based,"selection count, end-to-end time, cumulative time",,,,,,,
2019,"Eda, Ravi; Do, Hyunsook ",An efficient regression testing approach for PHP Web applications using test selection and reusable constraints,eda_efficient_2019,"Web applications undergo frequent changes. These changes can be due to the addition of new features or the modification of existing features to support customer requests or to patch faults in the system. Given that Web applications have a large surface area subject to attack, changes often include security fixes either in response to malicious attacks or to forestall such attacks. Effective regression testing should ensure that any change does not disable existing features or compromise security. Executing the entire regression test suite takes time and consumes many resources. One approach is to focus regression test efforts only on code paths that were modified in the new version. Such code paths can be identified using tools such as PHP Analysis and Regression Testing Engine (PARTE). In this paper, we extend this approach to test selection where a subset of existing tests that cover the modified code paths can be detected. To further reduce the amount of regression testing needed, we used PARTE’s reusable constraint value information to identify tests that can be reused against the new version without having to modify the input test values. We performed an empirical study to determine whether test selection data combined with reusable constraint values would further improve the turnaround time for regression tests. Results from the experiment conducted on four Hypertext Preprocessor (PHP) web applications demonstrate that this approach is effective in reducing the cost of regression testing of frequently patched Web applications.",Software Quality Journal,Springer,forward,10.1007/s11219-019-09449-2,2019-06-11,,,,"The experiments are not in collaboration with a company, but are very practical considering the choice of open-source subjects.",,,,,X,X,,PHP web applications,,TRUE,FALSE,Open-source PHP projects (up to 124 TCs),,TRUE,FALSE,FALSE,FALSE,,TRUE,,Change-based,"Selected tests, obsolete tests, reusable inputs",,,Hyunsook Do,N/A,No,N/A,
2019,"Yu, Zhe; Fahid, Fahmid; Menzies, Tim; Rothermel, Gregg; Patrick, Kyle; Cherian, Snehit",TERMINATOR: better automated UI test case prioritization,yu_terminator_2019,"Automated UI testing is an important component of the continuous integration process of software development. A modern web-based UI is an amalgam of reports from dozens of microservices written by multiple teams. Queries on a page that opens up another will fail if any of that page's microservices fails. As a result, the overall cost for automated UI testing is high since the UI elements cannot be tested in isolation. For example, the entire automated UI testing suite at LexisNexis takes around 30 hours (3-5 hours on the cloud) to execute, which slows down the continuous integration process.
To mitigate this problem and give developers faster feedback on their code, test case prioritization techniques are used to reorder the automated UI test cases so that more failures can be detected earlier. Given that much of the automated UI testing is ""black box"" in nature, very little information (only the test case descriptions and testing results) can be utilized to prioritize these automated UI test cases. Hence, this paper evaluates 17 ""black box"" test case prioritization approaches that do not rely on source code information. Among these, we propose a novel TCP approach, that dynamically re-prioritizes the test cases when new failures are detected, by applying and adapting a state of the art framework from the total recall problem. Experimental results on LexisNexis automated UI testing data show that our new approach (which we call TERMINATOR), outperformed prior state of the art approaches in terms of failure detection rates with negligible CPU overhead.",ESEC/FSE 2019: Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering,ACM,backward,10.1145/3338906.3340448,2019-08-12,,,,Robust study on the challenges of prioritizing UI tests. Developed in tandem with practitioners and making data available for replications and future improvements.,,,,X,,,,"UI testing, web app",,TRUE,TRUE,Dataset from LexisNexis (2661 TCs),LexisNexis (USA),TRUE,TRUE,FALSE,TRUE,https://github.com/ai-se/Data-for-automated-UI-testing-from-LexisNexis,TRUE,,"Coverage, history, cost, description, feedback","Coverage, APFD, APFDc, failure detection rate","identify flaky tests, identify fault location, apply approach to different TCP problems",,Zhe Yu,N/A,There was an attempt at LexisNexis. Current status unknown.,Yes,
2019,"Correia, Daniel; Abreu, Rui; Santos, Pedro; Nadkarni, Joo",MOTSD: A multi-objective test selection tool using test suite diagnosability,correia_motsd_2019,"Performing regression testing on large software systems becomes unfeasible as it takes too long to run all the test cases every time a change is made. The main motivation of this work was to provide a faster and earlier feedback loop to the developers at OutSystems when a change is made. The developed tool, MOTSD, implements a multi-objective test selection approach in a C# code base using a test suite diagnosability metric and historical metrics as objectives and it is powered by a particle swarm optimization algorithm. We present implementation challenges, current experimental results and limitations of the tool when applied in an industrial context. Screencast demo link: \textlessa\textgreaterhttps://www.youtube.com/watch?v=CYMfQTUu2BE\textless/a\textgreater © 2019 ACM.",ESEC/FSE 2019: Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering,ACM,Query,10.1145/3338906.3341187,2019-08-12,,,,,,Orchestration technique,Selection,X,X,,,General (C#),,TRUE,TRUE,OutSystems codebase in C# (over 8500 TCs),OutSystems (Portugal),TRUE,FALSE,TRUE,TRUE,http://github.com/danielcorreia96/MOTSD,TRUE,,"multi-objective, particle swarm optimization",Diagnosability,use data other than coverage (e.g. dependency graph); questions regarding evaluation; common benchmark for this type of tool.,,Rui Abreu,https://github.com/danielcorreia96/MOTSD,"Yes, it is in use at Outsystems.",Yes,
2019,"Machalica, Mateusz; Samylkin, Alex; Porth, Meredith; Chandra, Satish",Predictive Test Selection,machalica_predictive_2018,"Change-based testing is a key component of continuous integration at Facebook. However, a large number of tests coupled with a high rate of changes committed to our monolithic repository make it infeasible to run all potentially-impacted tests on each change. We propose a new predictive test selection strategy which selects a subset of tests to exercise for each change submitted to the continuous integration system. The strategy is learned from a large dataset of historical test outcomes using basic machine learning techniques. Deployed in production, the strategy reduces the total infrastructure cost of testing code changes by a factor of two, while guaranteeing that over 95% of individual test failures and over 99.9% of faulty changes are still reported back to developers. The method we present here also accounts for the non-determinism of test outcomes, also known as test flakiness.",2019 IEEE/ACM 41st International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP),IEEE,Query,10.1109/ICSE-SEIP.2019.00018,2019-08-19,,,,,,Orchestration technique,,,X,,,,,TRUE,TRUE,Facebook mobile app repository (undisclosed scale) ,Facebook (USA),TRUE,FALSE,FALSE,TRUE,,TRUE,,"machine learning-based, history-based","Recall, selection rate",Incorporate more features into the ML model; more sophisticated ML algorithms and models; correlation between tests that are impacted by the same code.,,Mateusz Machalica,Proprietary,Currently in use by Meta (Facebook),"""Change recall"" was crucial to measure if the technique could reduce cost without adverse impacts.",
2019,"Najafi, Armin; Shang, Weiyi; Rigby, Peter C.",Improving Test Effectiveness Using Test Executions History: An Industrial Experience Report,najafi_improving_2019,"The cost of software testing has become a burden for software companies in the era of rapid release and continuous integration. Our industrial collaborator Ericsson also faces the challenges of expensive testing processes which are typically part of a complex and specialized testing environment. In order to assist Ericsson with improving the test effectiveness of one of its large subsystems, we adopt test selection and prioritization approaches based on test execution history from prior research. By adopting and simulating those approaches on six months of testing data from our subject system, we confirm the existence of valuable information in the test execution history. In particular, the association between test failures provide the most value to the test selection and prioritization processes. More importantly, during this exercise, we encountered various challenges that are unseen or undiscussed in prior research. We document the challenges, our solutions and the lessons learned as an experience report. Our experiences can be valuable for other software testing practitioners and researchers who would like to adopt existing test effectiveness improvement approaches into their work environment.",2019 IEEE/ACM 41st International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP),IEEE,Query,10.1109/ICSE-SEIP.2019.00031,2019-08-19,,,,One of the few that incorporates both TCP and TCS.,,Ochestration technique,Selection + prioritization,X,X,,,General large-scale software,,TRUE,TRUE,Undisclosed large-scale system at Ericsson,Ericsson (Canada),FALSE,FALSE,FALSE,FALSE,,TRUE,,history-based,"Failure frequency, failure association, cost, execution time, missed failures, execution cost",,,Peter Rigby,Proprietary,"It was evaluated with Ericsson, but it is unknown if the technique is still in use.",,
2019,"Leong, Claire; Singh, Abhayendra; Papadakis, Mike; Le Traon, Yves; Micco, John; Traon, Yves Le; Micco, John",Assessing Transition-Based Test Selection Algorithms at Google,leong_assessing_2019,"Continuous Integration traditionally relies on testing every code commit with all impacted tests. This practice requires considerable computational resources, which at Google scale, results in delayed test results and high operational costs. To deal with this issue and provide fast feedback, test selection and prioritization methods aim to execute the tests which are most likely to reveal changes in test results as soon as possible. In this paper we present a simulation framework to support the study and evaluation, with real data, of such techniques. We propose a test selection algorithm evaluation method, and detail several practical requirements which are often ignored by related work, such as the detection of transitions, the collection and analysis of data, and the handling of flaky tests. Based on this framework, we design an experiment evaluating five potential regression test selection algorithms, based on simple heuristics and inspired by previous research, though the evaluation technique is applicable to any number of algorithms for future experiments. Our results show that algorithms based on the recent (transition) execution history do not perform as well as expected (given the previously reported results) and that the test selection problem remains largely open. We found that the best performing algorithms are based on the number of times a test has been triggered and the number of distinct authors committing code that triggers particular tests. More research is needed in order to close the gap between the current approaches and the optimal solution.",2019 IEEE/ACM 41st International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP),IEEE,Query,10.1109/ICSE-SEIP.2019.00019,2019-08-19,,,,An evaluation of five TCS techniques within Google's CI environment.,,Technique analysis,Selection,,X,,,,,TRUE,TRUE,Dataset from Google Test Automation Platform,Google (USA),TRUE,FALSE,FALSE,FALSE,,TRUE,,transition-based (apparently a mix of history-based and change-based),"Transition count, affected count, author count",,,,,,,
2019,"Philip, Adithya Abraham; Bhagwan, Ranjita; Kumar, Rahul; Maddila, Chandra Sekhar; Nagppan, Nachiappan; Nagappan, Nachiappan",FastLane: Test Minimization for Rapidly Deployed Large-Scale Online Services,philip_fastlane:_2019,"Today, we depend on numerous large-scale services for basic operations such as email. These services, built on the basis of Continuous Integration/Continuous Deployment (CI/CD) processes, are extremely dynamic: developers continuously commit code and introduce new features, functionality and fixes. Hundreds of commits may enter the code-base in a single day. Therefore one of the most time-critical, yet resource-intensive tasks towards ensuring code-quality is effectively testing such large code-bases. This paper presents FastLane, a system that performs data-driven test minimization. FastLane uses light-weight machine-learning models built upon a rich history of test and commit logs to predict test outcomes. Tests for which we predict outcomes need not be explicitly run, thereby saving us precious test-time and resources. Our evaluation on a large-scale email and collaboration platform service shows that our techniques can save 18.04%, i.e., almost a fifth of test-time while obtaining a test outcome accuracy of 99.99%.",2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE),IEEE,Query,10.1109/ICSE.2019.00054,2019-08-26,,,,,,Orchestration technique,Minimization,,,X,,General,,TRUE,TRUE,Microsoft Office 365 (tens of thousands of TCs),Microsoft (India),TRUE,FALSE,FALSE,MAYBE,,TRUE,,machine learning-based,"Precision/Recall, time saved",,,,,,,
2019,"Cruciani, Emilio; Miranda, Breno; Verdecchia, Roberto; Bertolino, Antonia",Scalable Approaches for Test Suite Reduction,cruciani_scalable_2019,"Test suite reduction approaches aim at decreasing software regression testing costs by selecting a representative subset from large-size test suites. Most existing techniques are too expensive for handling modern massive systems and moreover depend on artifacts, such as code coverage metrics or specification models, that are not commonly available at large scale. We present a family of novel very efficient approaches for similaritybased test suite reduction that apply algorithms borrowed from the big data domain together with smart heuristics for finding an evenly spread subset of test cases. The approaches are very general since they only use as input the test cases themselves (test source code or command line input).We evaluate four approaches in a version that selects a fixed budget B of test cases, and also in an adequate version that does the reduction guaranteeing some fixed coverage. The results show that the approaches yield a fault detection loss comparable to state-of-the-art techniques, while providing huge gains in terms of efficiency. When applied to a suite of more than 500K real world test cases, the most efficient of the four approaches could select B test cases (for varying B values) in less than 10 seconds.",2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE),IEEE,Query,10.1109/ICSE.2019.00055,2019-08-26,,,,,,Orchestration technique,Reduction,,,X,,General (Java),,TRUE,FALSE,,,FALSE,FALSE,TRUE,FALSE,https://zenodo.org/record/2550079,TRUE,,Similarity-based,"Fault detection loss, test suite reduction, time",,,"Emilio Cruciani
Roberto Verdecchia",https://github.com/ICSE19-FAST-R/FAST-R,"It was experimented with large open-source software from GitHub, but not integrated with the software's development pipeline.",N/A,Contact OK
2019,"Wu, Zhaolin; Yang, Yang; Li, Zheng; Zhao, Ruilian",A Time Window Based Reinforcement Learning Reward for Test Case Prioritization in Continuous Integration,wu_time_2019,"Continuous integration refers to the practice of merging the working copies of all developers into the mainline frequently. Regression testing for each mergence is characterized by continually changing test suite, limited execution time, and fast feedback, which demands new test optimization techniques. Reinforcement learning is introduced for test case prioritization to save computing resources in continuous integration environment, where a reasonable reward function is highly important for learning strategy, since the process of reinforcement learning is a reward-guided behavior. In this paper, APHFW, a novel reward function is proposed by using partial historical information of test cases effectively for fast feedback and cost reduction. The experiments are based on three open-source data sets, and the results show that the proposed reward function is more cost-effect than other reinforcement learning rewards in continuous integration environment.",Internetware '19: Proceedings of the 11th Asia-Pacific Symposium on Internetware,ACM,Query,10.1145/3361242.3361258,2019-10-28,,X,,,,Orchestration technique,,X,,,,Continuous integration in large scale software,,TRUE,TRUE,"""The Google dataset of testing results"" from Elbaum and Penix (5555 TCs) plus datasets from ABB Robotics (up to 2086 TCs)",,FALSE,FALSE,FALSE,FALSE,,TRUE,,"TCP by Reinforcement Learning, the paper experiments different windows on which the reward is calculated, in cmparison with Speiker (only recent observation) and He (full history)","NAPFD
Time cost of prioritization function",use windows of dynamic size,,Yang Yang,https://bitbucket.org/HelgeS/retecs/src/master/,"It was experimented with open-source software such as GSDTSR and Rails, but has not been adopted as standard.",Author believes the metrics in the paper have nothing to do with applicability.,Contact OK
2019,"Land, Kathrin; Neumann, Eva-Maria; Ziegltrum, Simon; Li, Huaxia; Vogel-Heuser, Birgit",An Industrial Evaluation of Test Prioritisation Criteria and Metrics,land_industrial_2019,"Automated production systems become more and more complex. This makes it
 increasingly difficult to keep track of performed changes and already 
executed test cases. This endangers the systems quality as the risk of 
missing important test cases while planning the test execution is high, 
especially for testers with little experience. To face this challenge, 
testers should be supported by an automatic test prioritisation based on
 metrics in selecting the right test cases for the test execution. In 
industry, many different test prioritisation criteria and strategies are
 used for this purpose. In an industrial interview, experts discussed 
and ranked prioritisation criteria that are currently used within the 
respective companies. As a result, this paper presents the cactus 
prioritisation model, which graphically resembles the industrial ranking
 and weighting of the criteria. Based on the prioritisation cactus and 
its criteria, a simple prioritisation metric is introduced to determine 
the utility of each test case regarding the system under test. The test 
cases are prioritised according to their descending utility. 
Furthermore, approaches and metrics to realise the different individual 
prioritisation criteria are proposed.","2019 IEEE International Conference on Systems, Man and Cybernetics (SMC)
 ",IEEE,forward,10.1109/SMC.2019.8914505,2019-11-28,,,,"By interviewing  practitioners in the field of automated production systems (APSs), the authors design a ""prioritization cactus"". This ranks TCP criteria according to what the practitioners find more important. 

A big part of the cactus is called the ""boss factor"", which is essentially a manual assignment of priority to a test case.",,Case study,,X,,,,Mechatronics,,TRUE,n/a,,Undisclosed industrial partner (Germany),FALSE,TRUE,FALSE,FALSE,,TRUE,,n/a,n/a,"When prioritizing, should the focus be entirely on the safety-critical tests, or should some other tests be sprinkled in-between?",,,,,,
2019,"Yackley, Jeffrey J.; Kessentini, Marouane; Bavota, Gabriele; Alizadeh, Vahid; Maxim, Bruce R.",Simultaneous refactoring and regression testing,yackley_simultaneous_2019,"Currently, refactoring and regression testing are treated independently by existing studies. However, software developers frequently switch between these two activities, using regression testing to identify unwanted behavior changes introduced while refactoring and applying refactoring on identified buggy code fragments. Our hypothesis is that the tools to support developers in these two tasks could transfer part of the knowledge extracted from the process of finding refactoring opportunities to identify relevant test cases, and vice-versa. We propose a simultasking, search-based algorithm that unifies the tasks of refactoring and regression testing, hence solving them simultaneously and enabling knowledge transfer between them. The salient feature of the proposed algorithm is a unified and generic solution representation scheme for both problems, which serves as a common platform for knowledge transfer between them. We implemented and evaluated the proposed simultasking approach on six opensource systems and one industrial project. Our study features quantitative and qualitative analysis performed with developers, and the results achieved show that the proposed approach provides advantages over mono-task techniques treating refactoring and regression testing separately. © 2019 IEEE.",2019 19th International Working Conference on Source Code Analysis and Manipulation (SCAM),IEEE,Query,10.1109/SCAM.2019.00032,2019-12-12,,,,"This combines RT (particularly TCS) with another software development challenge, refactoring. By attempting to solve both problems simultaneously, this approach can help developers improve pieces of code with high fault proneness. 

It's not quite what we think of as orchestration, but I think it has a nice idea of combining solutions together.",,Orchestration technique,,,X,,,,,FALSE,FALSE,Open-source Java projects (up to 128 TCs),,FALSE,TRUE,FALSE,FALSE,,MAYBE,,Search-based,"quality metric based on reusability, flexibility, understandability and effectiveness (but this is a metric for the refactoring)",,,,,,,
2019,"Shi, August; Zhao, Peiyuan; Marinov, Darko",Understanding and improving regression test selection in continuous integration,shi_understanding_2019,"Developers rely on regression testing in their continuous integration (CI) environment to find changes that introduce regression faults. While regression testing is widely practiced, it can be costly. Regression test selection (RTS) reduces the cost of regression testing by not running the tests that are unaffected by the changes. Industry has adopted module-level RTS for their CI environment, while researchers have proposed class-level RTS. In this paper, we compare module-and class-level RTS techniques in a cloud-based CI environment, Travis. We also develop and evaluate a hybrid RTS technique that combines aspects of the module-and class-level RTS techniques. We evaluate all the techniques on real Travis builds. We find that the RTS techniques do save testing time compared to running all tests (RetestAll), but the percentage of time for a full build using RTS (76.0%) is not as low as found in previous work, due to the extra overhead in a cloud-based CI environment. Moreover, we inspect test failures from RetestAll builds, and although we find that RTS techniques can miss to select failed tests, these test failures are almost all flaky test failures. As such, RTS techniques provide additional value in helping developers avoid wasting time debugging failures not related to the recent code changes. Overall, our results show that RTS can be beneficial for the developers in the CI environment, and RTS not only saves time but also avoids misleading developers by flaky test failures.",2019 IEEE 30th International Symposium on Software Reliability Engineering (ISSRE),IEEE,forward,10.1109/ISSRE.2019.00031,2020-02-10,,,,"A combination of GIB (module-level TCS) and Ekstazi (class-level TCS), GIBstazi, to improve overall TCS results. The idea is to select fewer tests than GIB, but be safer than Ekstazi.",,,,,X,,,Cloud-based continuous integration,,TRUE,FALSE,Open-source Java projects (up to 335 TCs),,FALSE,FALSE,FALSE,FALSE,,TRUE,,change-based,"Selection rate, time savings",,,Darko Marinov,https://github.com/august782/gitflow-incremental-builder,No,N/A,Contact OK
2020,"Noemmer, Raphael; Haas, Roman",An Evaluation of Test Suite Minimization Techniques,noemmer_evaluation_2020,"As a software project evolves over time, the associated test suite usually grows with it. If test suites are not carefully maintained, this can easily result in massive test execution duration, reducing the benefits of regression testing because faults are found later in development or even after release. Test suite minimization aims to combat long running test suites by removing redundant test cases. Previous work mainly evaluates test suite minimization techniques based on comparably small projects, which are less practically relevant. In this paper, we compare four test suite minimization techniques by applying them to several open source software projects and evaluate the results. We find that the size and execution time of all the test suites can be reduced by over 70% on average. However, there is a substantial loss in fault detection capability of, on average, around 12.5%, restricting the applicability of this form of test suite minimization. © Springer Nature Switzerland AG 2020.",SWQD 2020: International Conference on Software Quality,Springer,Query,10.1007/978-3-030-35510-4_4 ,2019-12-09,,,X,,,Technique analysis,,,,X,,"Investigates the applicability of TSR
techniques in practice",,FALSE,TRUE,Open-source Java projects (up to 14770 TCs),CQSE (Germany),TRUE,FALSE,FALSE,FALSE,,TRUE,,"basic greedy and the HGS
algorithm (guided by statement coverage only)","-test suite reduction achieved
-Impact on fault detection capability
-execution time of the reduced test suite (important finding: ""The reduction in number of tests appears to be a bad indicator for the reduction in execution time"")
",,,,,,,
2020,"Lübke, Daniel",Selecting and Prioritizing Regression Test Suites by Production Usage Risk in Time-Constrained Environments,lubke_selecting_2020,"Regression Testing is an important quality assurance activity for combating unwanted side-effects, which might have been introduced in a new software release. Selecting and prioritizing regression test cases is a challenge in practice – especially in a world of ever increasing complex- ity, distribution, and size of the software solutions. Current approaches try to minimize the number of regression test cases by analyzing the change and the coverage of the tests with regards to this change. Our approach utilizes usage frequencies from the previous, productive soft- ware version in order to select or prioritize test cases by calculating the Regression Risk of a change. This takes into account that not all features of a software are used the same. We successfully validate our approach in a case study of an industry project which develops a complex process integration platform.",SWQD 2020: Software Quality: Quality Intelligence in Software and Systems Engineering,Springer,Query,10.1007/978-3-030-35510-4_3 ,2019-12-09,,,,"Combined TCP/TCS approach based on regression risk, developed in cooperation with a Swiss financial platform.",,Orchestration technique,Selection and prioritization,X,X,,,,,TRUE,TRUE,Dataset from Terravis (375 TCs),Terravis (Switzerland),FALSE,TRUE,FALSE,FALSE,,TRUE,,"""risk-coverage""-based",Accumulated covered regression risk,combine with other TCP/TCS strategies; study differences between minor and major releases w.r.t. regression risk.,,,,,,
2020,"Zhou, Zhi Quan; Liu, Chen; Chen, Tsong Yueh; Tse, T. H.; Susilo, Willy",Beating Random Test Case Prioritization,zhou_beating_2020,"Existing test case prioritization (TCP) techniques have limitations when
 applied to real-world projects, because these techniques require 
certain information to be made available before they can be applied. For
 example, the family of input-based TCP techniques are based on test 
case values or test script strings; other techniques use test coverage, 
test history, program structure, or requirements information. Existing 
techniques also cannot guarantee to always be more effective than random
 prioritization (RP) that does not have any precondition. As a result, 
RP remains the most applicable and most fundamental TCP technique. This 
article proposes an extremely simple, effective, and efficient way to 
prioritize test cases through the introduction of a dispersity metric. 
Our technique is as applicable as RP. We conduct empirical studies using
 43 different versions of 15 real-world projects. Empirical results show
 that our technique is more effective than RP. Our algorithm has a 
linear computational complexity and, therefore, provides a practical 
solution to the problem of prioritizing very large test suites (such as 
those containing hundreds of thousands, or millions, of test cases), 
where the execution time of conventional nonlinear prioritization 
algorithms can be prohibitive. Our technique also provides a practical 
solution to TCP when neither input-based nor execution-based techniques 
are applicable due to lack of information.",IEEE Transactions on Reliability,IEEE,forward,10.1109/TR.2020.2979815,2020-06-16,,,,"This is an interesting one. The authors claim that random prioritization is still the de facto method of prioritizing test suites, because existing techniques either require information that is not easily available or do not guarantee always being better than random.

Their approach is based on the observation that generally, neighboring test cases within a suite tend to have similarities among themselves, while distant ones tend to be different. Using this they propose an adaptive random approach that, according to their results, is always at least a little better than random.

However they claim that FAST, for example, is not as applicable in practice because it requires additional information (the source code of the tests). To me, this seems strange: in which situation will tests be executed without access to their source code?",,,,X,,,,,,TRUE,TRUE,"Major open-source multi language projects, including Firefox (480575 TCs) and SQLite (787530 TCs)",,FALSE,FALSE,FALSE,FALSE,,TRUE,,Similarity-based,"Applicability, APFD, F-measure, time till first failure",,,Zhi Quan Zhou,https://github.com/mafimchen/ART,"Yes, an adapted version of the technique is in use at Alipay.","Yes, but the company also developed additional metrics during implementation.",Contact OK
2020,"Peng, Qianyang; Shi, August; Zhang, Lingming",Empirically revisiting and enhancing IR-based test-case prioritization,peng_empirically_2020,"Test-case prioritization (TCP) aims to detect regression bugs faster via reordering the tests run. While TCP has been studied for over 20 years, it was almost always evaluated using seeded faults/mutants as opposed to using real test failures. In this work, we study the recent change-aware information retrieval (IR) technique for TCP. Prior work has shown it performing better than traditional coverage-based TCP techniques, but it was only evaluated on a small-scale dataset with a cost-unaware metric based on seeded faults/mutants. We extend the prior work by conducting a much larger and more realistic evaluation as well as proposing enhancements that substantially improve the performance. In particular, we evaluate the original technique on a large-scale, real-world software-evolution dataset with real failures using both cost-aware and cost-unaware metrics under various configurations. Also, we design and evaluate hybrid techniques combining the IR features, historical test execution time, and test failure frequencies. Our results show that the change-aware IR technique outperforms stateof-the-art coverage-based techniques in this real-world setting, and our hybrid techniques improve even further upon the original IR technique. Moreover, we show that flaky tests have a substantial impact on evaluating the change-aware TCP techniques based on real test failures.
",ISSTA 2020: Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis,ACM,forward,10.1145/3395363.3397383,2020-07-18,,,,"This is an extension of a previous work. IR stands for Information Retrieval, a form of locating relevant tests based on queries derived from code changes.",,,,X,,,,,,TRUE,FALSE,Open-source Java projects (up to 144 TCs),,FALSE,FALSE,FALSE,FALSE,https://sites.google.com/view/ir-based-tcp,TRUE,,"Information retrieval; the idea is that code changes can be used to construct queries which in turn lead to related tests by finding textual similarities (e.g. variable names, function calls).","APFD, APFDc",,,August Shi,N/A,Unknown,N/A,
2020,"Dirim, Sahin; Sozer, Hasan",Prioritization of Test Cases with Varying Test Costs and Fault Severities for Certification Testing,dirim_prioritization_2020,"We present an industrial case study on the application of test case prioritization techniques in the context of certification testing in consumer electronics domain. Test execution times and fault severities are subject to high variations in this domain. As a result, most of the existing techniques and metrics turn out to be inappropriate for this application context. We discuss such deficiencies and the room for improvement based on our case study with the certification test suites of 3 Smart TV applications as real experimental objects. We also propose a new metric, LAPFD, which is based on the calculation of the average of the percentage of faults detected. This calculation is weighted according to the cost of test cases and calculated separately per severity class. Then, a lexicographic ordering is performed based on these classes. We compared the baseline (random) ordering of test cases with respect to an alternative ordering based on cost, measured as the test execution time. These alternative orderings are evaluated by using the LAPFD metric. We observed that cost-based ordering of test cases consistently outperformed random ordering. Another observation is that there is a large room for improvement regarding the effectiveness of test case prioritization in this application domain.","2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)",IEEE,forward,10.1109/ICSTW50294.2020.00069,2020-08-04,,X,,,,case study,,X,,,,consumer electronics (Smart tv),,TRUE,TRUE,"Smart TV applications for Netflix, YouTube and Prime Video (up to 213 TCs — but up to 40 hours)",Vestel Electronics (Turkey),TRUE,FALSE,FALSE,MAYBE,,TRUE,,"very simple, prioritize test cases based on their execution time (shortest first)",LAPFD (variant of APFD the considers cost for each of 4 severity classes),consider other TCP techniques as lexographic or history based,,Sahin Dirim,Work done in Excel (attached in email),"Yes, it was implemented at Vestel, but does not see large-scale adoption within the company.","Yes. Some improvements were made, detailed in a journal version currently under review.",
2020,"Prado Lima, Jackson A.; Vergilio, Silvia R.",Multi-Armed Bandit Test Case Prioritization in Continuous Integration Environments: A Trade-off Analysis,lima_multi-armed_2020,"Continuous Integration (CI) practices lead the software to be integrated and tested many times a day, usually subject to a test budget. To deal with this scenario, cost-effective test case prioritization techniques are required. COLEMAN is a Multi-Armed Bandit approach that learns from the test case failure-history the best prioritization order to maximize early fault detection. Reported results show that COLEMAN has reached promising results with different test budgets and spends, in the worst case, less than one second to execute. However, COLEMAN has not been evaluated against a search-based approach. Such an approach can generate near-optimal solutions but is not suitable to the CI budget because it takes too long to execute. Considering this fact, this paper analyses the trade-offs of the COLEMAN solutions in comparison with the near-optimal solutions generated by a Genetic Algorithm (GA). We use measures, which better fit with time constraints: Normalized Average Percentage of Faults Detected (NAPFD), Root-Mean-Square-Error (RMSE), and Prioritization Time. We use seven large-scale real-world software systems, and three different test budgets, 10%, 50%, and 80% of the total time required to execute the test set available for a CI cycle. COLEMAN obtains solutions near to the GA solutions in 90% of the cases, but scenarios with high volatility of test cases and a small number of cycles hamper the prioritization.",SAST 20: Proceedings of the 5th Brazilian Symposium on Systematic and Automated Software Testing,ACM,query refresh,10.1145/3425174.3425210,2020-10-20,,,,,,,,X,,,,,,TRUE,TRUE,Open-source programs (up to 2391 TCs),,FALSE,FALSE,FALSE,FALSE,,TRUE,,reinforcement learning based,"NAPFD, RMSE (root-mean-square-error), prioritization time",,,,,,,