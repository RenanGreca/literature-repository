,Approach,References,TCP,TCS,TSR,TSA,Description
Information,History-based,"chen_test_2016, srikanth_test_2016, aman_application_2016, kwon_cost-effective_2017, haghighatkhah_test_2018, busjaeger_learning_2016, marijan_effect_2016, yu_terminator_2019, machalica_predictive_2018, strandberg_experience_2016, najafi_improving_2019","srikanth_test_2016, aman_application_2016, kwon_cost-effective_2017, haghighatkhah_test_2018, busjaeger_learning_2016, marijan_effect_2016, yu_terminator_2019, strandberg_experience_2016, najafi_improving_2019","kwon_cost-effective_2017, machalica_predictive_2018, najafi_improving_2019",,,Uses information from previous testing cycles to decide about test case relevance.
Information,Change-based,"zhang_hybrid_2018, vasic_file-level_2017, fu_resurgence_2019, shi_understanding_2019, celik_regression_2017, ramler_tool_2017, strandberg_experience_2016, yilmaz_case_2018, celik_regression_2018, guo_decomposing_2019, eda_efficient_2019",strandberg_experience_2016,"zhang_hybrid_2018, vasic_file-level_2017, fu_resurgence_2019, shi_understanding_2019, celik_regression_2017, ramler_tool_2017, yilmaz_case_2018, celik_regression_2018, guo_decomposing_2019, eda_efficient_2019, zhang_comparing_2022, oqvist_extraction-based_2016, chen_context-aware_2021, cingil_black-box_2022, greca_comparing_2022",eda_efficient_2019,,Uses changes between versions to identify the relevant test cases.
Information,Coverage-based,"noemmer_evaluation_2020, bach_coverage-based_2017, busjaeger_learning_2016, yu_terminator_2019, ouriques_test_2018, ramler_tool_2017, lubke_selecting_2020, yoshida_fsx_2016, zhong_testsage:_2019, shi_evaluating_2018","bach_coverage-based_2017, busjaeger_learning_2016, yu_terminator_2019, ouriques_test_2018, lubke_selecting_2020, magalhaes_hsp_2020","bach_coverage-based_2017, ramler_tool_2017, lubke_selecting_2020, zhong_testsage:_2019, magalhaes_hsp_2020","noemmer_evaluation_2020, shi_evaluating_2018",yoshida_fsx_2016,"Uses structural coverage information, whereby coverage can be of statement, method, class, file, etc."
Information,Cost-aware,"tahvili_cost-benefit_2016, dirim_prioritization_2020, lu_how_2016, yu_terminator_2019, wang_enhancing_2016","tahvili_dynamic_2016, lu_how_2016, yu_terminator_2019, wang_enhancing_2016, tahvili_cost-benefit_2016, zhou_parallel_2022","tahvili_dynamic_2016, chen_multi-objective_2021",,,Utilizes test case cost or time information to assess test relevance.
Information,Requirements-based,"srikanth_requirements_2016, goyal_test_2019",srikanth_requirements_2016,,goyal_test_2019,,"Relate tests with project-sensitive information, such as requirements and risk assessments."
Information,Manual classification,"tahvili_cost-benefit_2016, tahvili_dynamic_2016, yu_terminator_2019","tahvili_cost-benefit_2016, tahvili_dynamic_2016, yu_terminator_2019",tahvili_dynamic_2016,,,Requires at least some information that must be manually inputted by an expert.
Information,Model-based,"buchgeher_improving_2016, ouriques_test_2018","buchgeher_improving_2016, ouriques_test_2018",buchgeher_improving_2016,,,Informs the test technique using behavioural or architectural models.
Information,Trace-based,"vost_trace-based_2016, zhong_testsage:_2019",,"vost_trace-based_2016, zhong_testsage:_2019",,,Provides inputs and keeps track of the effects of those inputs throughout the program.
Information,Fault-based,"marijan_effect_2016, zhu_test_2018, leong_assessing_2019","marijan_effect_2016, zhu_test_2018","leong_assessing_2019, chen_multi-objective_2021, cingil_black-box_2022",,,Utilizes information related to fault detection or failure beaviour.
Information,Test code,"peng_empirically_2020, noor_similarity-based_2016, miranda_fast_2018","peng_empirically_2020, noor_similarity-based_2016, miranda_fast_2018, greca_comparing_2022",,cruciani_scalable_2019,,Uses the plain text source code of the test cases.
Information,Load factor,buchgeher_improving_2016,buchgeher_improving_2016,buchgeher_improving_2016,,,Indicates what parts of the SUT are most used by different services and components.
Information,Author count,leong_assessing_2019,,leong_assessing_2019,,,Number of authors associated with a certain part of the SUT.
Information,Execution context,"chen_context-aware_2021, celik_regression_2017",,"chen_context-aware_2021, celik_regression_2017",,,"Considers environment data such as libraries, APIs, databases, operating system, etc."
Algorithm,Similarity / distance-based,"chen_test_2016, zhou_beating_2020, haghighatkhah_test_2018, busjaeger_learning_2016, noor_similarity-based_2016, ouriques_test_2018, miranda_fast_2018, aman_application_2016","zhou_beating_2020, haghighatkhah_test_2018, busjaeger_learning_2016, noor_similarity-based_2016, ouriques_test_2018, miranda_fast_2018, aman_application_2016, greca_comparing_2022",,cruciani_scalable_2019,,"Assesses test cases based on their similarity, with the objective of diversifying the suite."
Algorithm,Search-based,"pradhan_search-based_2016, magalhaes_automatic_2016, peng_empirically_2020, lu_how_2016, wang_enhancing_2016, chi_multi-level_2017, garousi_multi-objective_2018, correia_motsd_2019, zarges_artificial_2021","peng_empirically_2020, lu_how_2016, wang_enhancing_2016, correia_motsd_2019, zhou_parallel_2022, magalhaes_hsp_2020","pradhan_search-based_2016, magalhaes_automatic_2016, garousi_multi-objective_2018, correia_motsd_2019, zarges_artificial_2021, magalhaes_hsp_2020",chi_multi-level_2017,,"Utilizes search-based algorithms, such as genetic or nature-inspired ones"
Algorithm,Machine learning-based,"wu_time_2019, busjaeger_learning_2016, machalica_predictive_2018, philip_fastlane:_2019, lima_multi-armed_2020","wu_time_2019, busjaeger_learning_2016, abdelkarim_tcp-net_2022, lima_multi-armed_2022, yaraghi_scalable_2022, bertolino_learning--rank_2020, elsner_empirically_2021, bagherzadeh_reinforcement_2022, omri_learning_2022, spieker_reinforcement_2017","machalica_predictive_2018, zhang_comparing_2022, elsner_empirically_2021, mehta_data-driven_2021",philip_fastlane:_2019,,"Trains a ML model using historical or other data. Includes supervised, unsupervised and reinforcement learning methods."
Algorithm,Graph-based,"hirzel_graph-walk-based_2016, azizi_retest_2018, ouriques_test_2018, ramler_tool_2017, yilmaz_case_2018, celik_regression_2018",ouriques_test_2018,"hirzel_graph-walk-based_2016, azizi_retest_2018, ramler_tool_2017, yilmaz_case_2018, celik_regression_2018, bertolino_learning--rank_2020",,,Creates a graph representation of the SUT and utilizes graph theory algorithms to solve problems.
Algorithm,Greedy,"noemmer_evaluation_2020, lu_how_2016, bach_coverage-based_2017","lu_how_2016, zhou_parallel_2022, li_aga_2021",,"noemmer_evaluation_2020, bach_coverage-based_2017",,Utilizes greedy algorithms and heuristics (usually based on coverage or similarity information).
Algorithm,Constraints-based,"gotlieb_using_2017, eda_efficient_2019",,eda_efficient_2019,"gotlieb_using_2017, eda_efficient_2019",,Utilizes constraint programming paradigm.
Algorithm,Bloom filter or window-based,kwon_cost-effective_2017,"schwartz_cost-effective_2016, kwon_cost-effective_2017, pan_dynamic_2020",kwon_cost-effective_2017,,,Utilizes Bloom filter data structures and time windows to filter out tests that  fail only once.