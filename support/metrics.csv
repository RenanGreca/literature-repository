,Metric,References,TCP,TCS,TSR,TSA,Description
Effectiveness,Selection/reduction count/percentage,"gotlieb_using_2017, hirzel_graph-walk-based_2016, zhang_hybrid_2018, noemmer_evaluation_2020, eda_efficient_2019, bach_coverage-based_2017, blondeau_test_2017, vasic_file-level_2017, fu_resurgence_2019, azizi_retest_2018, shi_understanding_2019, goyal_test_2019, vost_trace-based_2016, machalica_predictive_2018, celik_regression_2017, celik_regression_2018, yilmaz_case_2018, chi_multi-level_2017",,"hirzel_graph-walk-based_2016, zhang_hybrid_2018, eda_efficient_2019, bach_coverage-based_2017, blondeau_test_2017, vasic_file-level_2017, fu_resurgence_2019, azizi_retest_2018, shi_understanding_2019, vost_trace-based_2016, machalica_predictive_2018, celik_regression_2017, celik_regression_2018, yilmaz_case_2018, zhang_comparing_2022, chen_context-aware_2021, cingil_black-box_2022","gotlieb_using_2017, noemmer_evaluation_2020, eda_efficient_2019, goyal_test_2019, chi_multi-level_2017",,Absolute or relative size of the resulting test suite compared to the original.
Effectiveness,Average Percentage of Faults Detected (APFD),"wu_time_2019, dirim_prioritization_2020, chen_test_2016, srikanth_test_2016, peng_empirically_2020, lu_how_2016, haghighatkhah_test_2018, busjaeger_learning_2016, marijan_effect_2016, yu_terminator_2019, chen_optimizing_2018, ouriques_test_2018, srikanth_requirements_2016, miranda_fast_2018, lima_multi-armed_2020","wu_time_2019, srikanth_test_2016, peng_empirically_2020, lu_how_2016, haghighatkhah_test_2018, busjaeger_learning_2016, marijan_effect_2016, yu_terminator_2019, chen_optimizing_2018, ouriques_test_2018, srikanth_requirements_2016, miranda_fast_2018, abdelkarim_tcp-net_2022, lima_multi-armed_2022, zhou_parallel_2022, yaraghi_scalable_2022, pan_dynamic_2020, bagherzadeh_reinforcement_2022, li_aga_2021, omri_learning_2022, greca_comparing_2022, spieker_reinforcement_2017",,,,"A measure of how quickly a test suite detects faults, on average. Includes many variations, such as APFDc and NAPFD."
Effectiveness,Testing time,"noemmer_evaluation_2020, zhong_testsage:_2019, shi_understanding_2019, goyal_test_2019, philip_fastlane:_2019, celik_regression_2017, celik_regression_2018, garousi_multi-objective_2018, strandberg_experience_2016, yilmaz_case_2018, ramler_tool_2017, tahvili_dynamic_2016",,"zhong_testsage:_2019, shi_understanding_2019, celik_regression_2017, celik_regression_2018, garousi_multi-objective_2018, yilmaz_case_2018, ramler_tool_2017, tahvili_dynamic_2016, zhang_comparing_2022, mehta_data-driven_2021, cingil_black-box_2022","noemmer_evaluation_2020, goyal_test_2019, philip_fastlane:_2019",,Time required to execute the prioritized/selected/reduced test suite as opposed to the original suite.
Effectiveness,Accuracy/precision/recall,"magalhaes_automatic_2016, kwon_cost-effective_2017, busjaeger_learning_2016, blondeau_test_2017, machalica_predictive_2018, philip_fastlane:_2019, guo_decomposing_2019","kwon_cost-effective_2017, busjaeger_learning_2016, abdelkarim_tcp-net_2022, pan_dynamic_2020, omri_learning_2022","magalhaes_automatic_2016, kwon_cost-effective_2017, blondeau_test_2017, machalica_predictive_2018, guo_decomposing_2019, xu_requirement-based_2021",philip_fastlane:_2019,,"Measures of correctness and completeness of the resulting test suite (e.g., count of false positives and false negatives)."
Effectiveness,Fault Detection Capability,"kwon_cost-effective_2017, marijan_effect_2016, wang_enhancing_2016, zarges_artificial_2021","schwartz_cost-effective_2016, marijan_effect_2016, wang_enhancing_2016","kwon_cost-effective_2017, zarges_artificial_2021, chen_context-aware_2021, cingil_black-box_2022",,,Number or proportion of faults detected by the resulting suite compared to the original.
Effectiveness,Fault Detection Rate (FDR),"azizi_retest_2018, yu_terminator_2019, strandberg_experience_2016, aman_application_2016","yu_terminator_2019, strandberg_experience_2016, aman_application_2016",azizi_retest_2018,,,Time to detect faults compared to the optimal RT suite.
Effectiveness,Coverage Effectiveness (CE),"yu_terminator_2019, yoshida_fsx_2016, noor_similarity-based_2016, lubke_selecting_2020","yu_terminator_2019, noor_similarity-based_2016, lubke_selecting_2020, magalhaes_hsp_2020","lubke_selecting_2020, magalhaes_hsp_2020",,yoshida_fsx_2016,Measure of the tradeoff between cost of the test suite and structural coverage of the SUT.
Effectiveness,Time/tests To First Failure,"zhou_beating_2020, blondeau_test_2017, chen_optimizing_2018, noor_similarity-based_2016, zhu_test_2018, zarges_artificial_2021","zhou_beating_2020, chen_optimizing_2018, noor_similarity-based_2016, zhu_test_2018, lima_multi-armed_2022, zhou_parallel_2022, pan_dynamic_2020, greca_comparing_2022","blondeau_test_2017, zarges_artificial_2021, greca_comparing_2022",,,Number of tests or amount of time needed to reach the first failure.
Effectiveness,Fault detection within a budget,"bach_coverage-based_2017, wang_enhancing_2016, lima_multi-armed_2022, greca_comparing_2022, pradhan_search-based_2016","bach_coverage-based_2017, wang_enhancing_2016, lima_multi-armed_2022, greca_comparing_2022","greca_comparing_2022, pradhan_search-based_2016, bach_coverage-based_2017",,,Faults still detected when restricting the testing time budget.
Effectiveness,Cost-benefit model,"tahvili_cost-benefit_2016, schwartz_cost-effective_2016, garousi_multi-objective_2018","tahvili_cost-benefit_2016, schwartz_cost-effective_2016","garousi_multi-objective_2018, mehta_data-driven_2021",,,Mathematical models considering costs and benefits of applying a technique throughout development.
Effectiveness,Fault Detection Loss,"noemmer_evaluation_2020, najafi_improving_2019, cruciani_scalable_2019, shi_evaluating_2018",najafi_improving_2019,"najafi_improving_2019, chen_multi-objective_2021","shi_evaluating_2018, cruciani_scalable_2019",,Number or proportion of faults undetected by the selected/reduced test suite compared to the original.
Effectiveness,Comparison to expert,magalhaes_automatic_2016,buchgeher_improving_2016,"buchgeher_improving_2016, magalhaes_automatic_2016",,,Compares the output of the tool with a list of tests selected by the project architect.
Effectiveness,Faults per tests/time,kwon_cost-effective_2017,kwon_cost-effective_2017,kwon_cost-effective_2017,,,Number of faults deteted per number of tests or testing time.
Effectiveness,Number of tests added,yoshida_fsx_2016,,,,yoshida_fsx_2016,Number of tests added to the test suite.
Effectiveness,Algorithm performance measures,pradhan_search-based_2016,,pradhan_search-based_2016,,,Fitness value or hypervolume metrics applied to search-based algorithms
Effectiveness,Accumulated regression risk,lubke_selecting_2020,lubke_selecting_2020,lubke_selecting_2020,,,"How much of the ""regression risk"" is covered by the tests."
Effectiveness,Root-mean-square-error (RMSE),,,,,,Compares the predicted and observed results.
Effectiveness,Rank Percentile Average (RPA),"bertolino_learning--rank_2020, bagherzadeh_reinforcement_2022","bertolino_learning--rank_2020, bagherzadeh_reinforcement_2022",bertolino_learning--rank_2020,,,Comparison between the predicted ranking and the actual ranking (from the dataset).
Effectiveness,Most Likely Relative Position (MRP),,,,,,"Average position of first failed test, i.e. an estimate of how long the suite takes to find the first fault."
Effectiveness,Savings Factor,,,,,,Mapping of APFD to dollar savings.
,,,,,,,
Efficiency,Execution time,"wu_time_2019, gotlieb_using_2017, hirzel_graph-walk-based_2016, chen_test_2016, haghighatkhah_test_2018, zhong_testsage:_2019, vasic_file-level_2017, wang_enhancing_2016, yoshida_fsx_2016, celik_regression_2017, najafi_improving_2019, miranda_fast_2018, cruciani_scalable_2019, chi_multi-level_2017","wu_time_2019, haghighatkhah_test_2018, wang_enhancing_2016, najafi_improving_2019, miranda_fast_2018, lima_multi-armed_2022, zhou_parallel_2022, li_aga_2021, greca_comparing_2022","hirzel_graph-walk-based_2016, zhong_testsage:_2019, vasic_file-level_2017, celik_regression_2017, najafi_improving_2019, zhang_comparing_2022, xu_requirement-based_2021, greca_comparing_2022","gotlieb_using_2017, cruciani_scalable_2019, chi_multi-level_2017",yoshida_fsx_2016,"Time required to run the tool (e.g., selection time, prioritization time, etc)."
Efficiency,Total/End-to-end time,"zhang_hybrid_2018, fu_resurgence_2019, wang_enhancing_2016, celik_regression_2018, miranda_fast_2018, vasic_file-level_2017","wang_enhancing_2016, miranda_fast_2018, bertolino_learning--rank_2020, greca_comparing_2022","zhang_hybrid_2018, fu_resurgence_2019, celik_regression_2018, vasic_file-level_2017, zhang_comparing_2022, oqvist_extraction-based_2016, bertolino_learning--rank_2020, greca_comparing_2022",,,"End-to-end time, combining measuring time, execution time and testing time. Due to this, it is a measure of both efficiency and effectiveness."
Efficiency,Memory usage,"hirzel_graph-walk-based_2016, wang_enhancing_2016",wang_enhancing_2016,hirzel_graph-walk-based_2016,,,Measures the amount of memory used by the tool.
Efficiency,Scalability,"miranda_fast_2018, cruciani_scalable_2019","miranda_fast_2018, yaraghi_scalable_2022",,cruciani_scalable_2019,,How well the tool performs on subjects of different sizes.
Efficiency,Measuring time/cost,elsner_empirically_2021,elsner_empirically_2021,elsner_empirically_2021,,,"Measure of how costly is the information needed by the technique (e.g. compiling tests, collecting coverage, training a model)."
,,,,,,,
Other,Applicability/Generality,zhou_beating_2020,zhou_beating_2020,xu_requirement-based_2021,,,The variety of SUTs upon which the tool can be applied.
Other,Diagnosability,correia_motsd_2019,correia_motsd_2019,correia_motsd_2019,,,Cost of diagnosing a fault upon detection.